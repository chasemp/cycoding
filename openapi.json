{
  "openapi": "3.0.1",
  "info": {
    "title": "Cycode API Documentation v4",
    "version": "4.0",
    "description": "Welcome to the Cycode API Reference guide! The guide covers the APIs used in the Cycode platform, including handling policies, violations, integrations, Assets, and more.",
    "x-logo": {
      "url": "https://cycode.com/wp-content/uploads/2025/05/Cycode_logoHorz.svg",
      "backgroundColor": "#FFFFFF00",
      "altText": "Cycode logo"
    }
  },
  "paths": {
    "/v4/audit-logs": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "Get audit logs by filter",
        "description": "Fetches a paginated list of audit logs based on the provided filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Filter logs created *after* or exactly at this timestamp (inclusive). Format: ISO 8601 DateTimeOffset (e.g., '2025-04-22T10:00:00Z').",
            "schema": {
              "type": "string",
              "description": "Filter logs created *after* or exactly at this timestamp (inclusive). Format: ISO 8601 DateTimeOffset (e.g., '2025-04-22T10:00:00Z').",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Filter logs created *before* or exactly at this timestamp (inclusive). Format: ISO 8601 DateTimeOffset (e.g., '2025-04-22T14:55:10+03:00').",
            "schema": {
              "type": "string",
              "description": "Filter logs created *before* or exactly at this timestamp (inclusive). Format: ISO 8601 DateTimeOffset (e.g., '2025-04-22T14:55:10+03:00').",
              "format": "date-time"
            }
          },
          {
            "name": "subject_type",
            "in": "query",
            "description": "Filter logs based on the type of the entity that was acted upon.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the type of the entity that was acted upon."
            }
          },
          {
            "name": "excluded_subject_type",
            "in": "query",
            "description": "Exclude logs where the subject type matches any of the provided types.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Exclude logs where the subject type matches any of the provided types."
            }
          },
          {
            "name": "subject_id",
            "in": "query",
            "description": "Filter logs based on the specific ID of the entity that was acted upon.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the specific ID of the entity that was acted upon."
            }
          },
          {
            "name": "actor_id",
            "in": "query",
            "description": "Filter logs based on the internal ID of the user or service principal that performed the action.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the internal ID of the user or service principal that performed the action."
            }
          },
          {
            "name": "external_actor_id",
            "in": "query",
            "description": "Filter logs based on an external identifier for the actor (e.g., an ID from an external identity provider).",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on an external identifier for the actor (e.g., an ID from an external identity provider)."
            }
          },
          {
            "name": "external_user_provider",
            "in": "query",
            "description": "Filter logs based on the provider or source of the external actor.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the provider or source of the external actor."
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter logs based on the specific action performed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the specific action performed."
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reviewed",
            "in": "query",
            "description": "Filter logs based on their review status. `true` for reviewed, `false` for unreviewed, omit to include both.",
            "schema": {
              "type": "boolean",
              "description": "Filter logs based on their review status. `true` for reviewed, `false` for unreviewed, omit to include both."
            }
          },
          {
            "name": "search_by",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchBy"
            }
          },
          {
            "name": "search_data",
            "in": "query",
            "description": "The text or value to search for within the field(s) specified by `search_by`.",
            "schema": {
              "type": "string",
              "description": "The text or value to search for within the field(s) specified by `search_by`."
            }
          },
          {
            "name": "is_activity_log",
            "in": "query",
            "description": "Filter specifically for logs categorized as 'activity logs'. Omit to include all types.",
            "schema": {
              "type": "boolean",
              "description": "Filter specifically for logs categorized as 'activity logs'. Omit to include all types."
            }
          },
          {
            "name": "should_return_minimized_log",
            "in": "query",
            "description": "Set to `true` to receive a minimized version of the log entries, potentially omitting detailed metadata. Defaults to `false`.",
            "schema": {
              "type": "boolean",
              "description": "Set to `true` to receive a minimized version of the log entries, potentially omitting detailed metadata. Defaults to `false`."
            }
          },
          {
            "name": "should_filter_cycode_user",
            "in": "query",
            "description": "Set to `true` to automatically exclude logs generated by internal Cycode system processes. Defaults to `false`.",
            "schema": {
              "type": "boolean",
              "description": "Set to `true` to automatically exclude logs generated by internal Cycode system processes. Defaults to `false`."
            }
          },
          {
            "name": "ip_address",
            "in": "query",
            "description": "Filter logs based on the source IP address from which the action originated.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the source IP address from which the action originated."
            }
          },
          {
            "name": "repository_name",
            "in": "query",
            "description": "Filter logs based on the repository name.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the repository name."
            }
          },
          {
            "name": "last_reviewed_by",
            "in": "query",
            "description": "Filter logs based on the last reviewer.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter logs based on the last reviewer."
            }
          },
          {
            "name": "should_count_total",
            "in": "query",
            "description": "Set to `false` to potentially speed up the query by omitting the calculation of the total number of matching logs. Defaults to `true`.",
            "schema": {
              "type": "boolean",
              "description": "Set to `false` to potentially speed up the query by omitting the calculation of the total number of matching logs. Defaults to `true`."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAuditLogsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/audit-logs/{id}": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "Get audit log by id",
        "description": "Fetches a single audit log by the provided ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLog"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/groups": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create a new group",
        "description": "Creates a new group with the specified details\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve a paginated list of groups",
        "description": "Fetches a paginated list of groups based on the provided filter criteria. Requires full access",
        "parameters": [
          {
            "name": "group_id",
            "in": "query",
            "description": "Filters groups to include only the one specified by this ID.",
            "schema": {
              "type": "integer",
              "description": "Filters groups to include only the one specified by this ID.",
              "format": "int32"
            }
          },
          {
            "name": "group_ids",
            "in": "query",
            "description": "Filters groups to include only the ones specified by these IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filters groups to include only the ones specified by these IDs."
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filters groups based on a text search within the group name.",
            "schema": {
              "type": "string",
              "description": "Filters groups based on a text search within the group name."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/groups/{groupId}": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update a group",
        "description": "Updates an existing group by its ID\n\n**Required Roles:** Admin, Owner",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete a group",
        "description": "Deletes an existing group identified by its ID.\n\n**Required Roles:** Admin, Owner",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/groups/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve a paginated list of groups members",
        "description": "Fetches a paginated list of groups members based on the provided filter criteria. Requires full access.",
        "parameters": [
          {
            "name": "group_ids",
            "in": "query",
            "description": "Filters group members to include only those belonging to the specified group IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filters group members to include only those belonging to the specified group IDs."
            }
          },
          {
            "name": "member_ids",
            "in": "query",
            "description": "Filters group members to include only those with the specified member IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filters group members to include only those with the specified member IDs."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListGroupMembersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/hierarchy": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve a paginated list of hierarchy entities",
        "description": "Fetches a list of hierarchy entities based on the provided filter criteria.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Searches for hierarchy entities (projects and groups) by name. Results will be flattened and not grouped by hierarchy.",
            "schema": {
              "type": "string",
              "description": "Searches for hierarchy entities (projects and groups) by name. Results will be flattened and not grouped by hierarchy."
            }
          },
          {
            "name": "parent_group_id",
            "in": "query",
            "description": "Filters the results by the parent group ID. If set to 0, retrieves top-level assets. If set to null, retrieves all assets as a flat list.",
            "schema": {
              "type": "integer",
              "description": "Filters the results by the parent group ID. If set to 0, retrieves top-level assets. If set to null, retrieves all assets as a flat list.",
              "format": "int32"
            }
          },
          {
            "name": "entity_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/HierarchyEntityType"
            }
          },
          {
            "name": "entity_ids",
            "in": "query",
            "description": "Filters the results by a list of specific entity IDs (`Project ID` / `Group ID`), `entity_type` must be provided.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filters the results by a list of specific entity IDs (`Project ID` / `Group ID`), `entity_type` must be provided."
            }
          },
          {
            "name": "has_collisions",
            "in": "query",
            "description": "Filters the results by whether the entity has collisions or not.",
            "schema": {
              "type": "boolean",
              "description": "Filters the results by whether the entity has collisions or not."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListHierarchyEntitysResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/hierarchy/path/{entityType}/{entityId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve an entity with all parents",
        "description": "Fetches a hierarchy entities with all parents included",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/HierarchyEntityType"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HierarchyEntityPath"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/roles": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get all member roles",
        "description": "Retrieves a list of all member roles.",
        "parameters": [
          {
            "name": "x-tenant-ids",
            "in": "header",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRole"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get members",
        "description": "Retrieves a list of members, filtered according to the provided criteria.\n\n**Required Roles:** Admin, Owner, Developer, Member, Viewer, ProjectManager",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Filters users by their email address.",
            "schema": {
              "type": "string",
              "description": "Filters users by their email address."
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filters users by a list of user IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filters users by a list of user IDs."
            }
          },
          {
            "name": "mfa_enabled",
            "in": "query",
            "description": "Filters users based on whether Multi-Factor Authentication (MFA) is enabled.",
            "schema": {
              "type": "boolean",
              "description": "Filters users based on whether Multi-Factor Authentication (MFA) is enabled."
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "Filters users to include only those associated with the specified project IDs.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filters users to include only those associated with the specified project IDs."
            }
          },
          {
            "name": "is_orphan",
            "in": "query",
            "description": "Filters users based on whether they are orphaned (not associated with a tenant/project entity).",
            "schema": {
              "type": "boolean",
              "description": "Filters users based on whether they are orphaned (not associated with a tenant/project entity)."
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Filters users by a set of assigned roles.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filters users by a set of assigned roles."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner",
          "Developer",
          "Member",
          "Viewer",
          "ProjectManager"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/{memberId}": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get member details",
        "description": "Retrieves the details of a specific member identified by their ID.",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/name": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Update member's full name",
        "description": "Updates the full name of the currently authenticated member",
        "parameters": [
          {
            "name": "fullName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/{memberId}/reset-password": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Reset member password",
        "description": "Resets the password for a specific member, identified by their ID, and returns the new password.\n\n**Required Roles:** Admin, Owner",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberPassword"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/change-password": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Change member password",
        "description": "Changes the current member's password",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MemberPassword"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberPassword"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberPassword"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MemberPassword"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/mfa/enable": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Enable MFA for member",
        "description": "Enables Multi-Factor Authentication (MFA) for the currently authenticated member.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "208": {
            "description": "Already Reported"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/mfa/enroll": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Enroll MFA authenticator app",
        "description": "Starts the enrollment process for an authenticator app for MFA for the currently authenticated member.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberMfaQr"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/mfa/disable": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Disable MFA for member",
        "description": "Disables Multi-Factor Authentication (MFA) for the currently authenticated member.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "208": {
            "description": "Already Reported"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/members/me": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "Get current member",
        "description": "Retrieves the details of a current member.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Fetch projects",
        "description": "Fetches a paginated list of projects based on the provided filter criteria.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Searches for project entities by name.",
            "schema": {
              "type": "string",
              "description": "Searches for project entities by name."
            }
          },
          {
            "name": "business_impact",
            "in": "query",
            "description": "Filters projects based on a set of specified business impact types.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BusinessImpactType"
              },
              "description": "Filters projects based on a set of specified business impact types."
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "Filters projects to include only those specified by this list of project IDs.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filters projects to include only those specified by this list of project IDs."
            }
          },
          {
            "name": "include_related_properties",
            "in": "query",
            "description": "Specifies whether to include related properties in the response. Defaults to `true`.",
            "schema": {
              "type": "boolean",
              "description": "Specifies whether to include related properties in the response. Defaults to `true`."
            }
          },
          {
            "name": "parent_group_id",
            "in": "query",
            "description": "Filters the results by the parent group ID.",
            "schema": {
              "type": "integer",
              "description": "Filters the results by the parent group ID.",
              "format": "int32"
            }
          },
          {
            "name": "risk_score_from",
            "in": "query",
            "description": "Filters projects to include only those with a risk score greater than or equal to this value.",
            "schema": {
              "type": "integer",
              "description": "Filters projects to include only those with a risk score greater than or equal to this value.",
              "format": "int32"
            }
          },
          {
            "name": "risk_score_to",
            "in": "query",
            "description": "Filters projects to include only those with a risk score less than or equal to this value.",
            "schema": {
              "type": "integer",
              "description": "Filters projects to include only those with a risk score less than or equal to this value.",
              "format": "int32"
            }
          },
          {
            "name": "has_collisions",
            "in": "query",
            "description": "Filters the results by whether the entity has collisions or not.",
            "schema": {
              "type": "boolean",
              "description": "Filters the results by whether the entity has collisions or not."
            }
          },
          {
            "name": "include_child_assets",
            "in": "query",
            "description": "Specifies whether to include child assets in the response. Defaults to `false`.",
            "schema": {
              "type": "boolean",
              "description": "Specifies whether to include child assets in the response. Defaults to `false`."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a new project",
        "description": "Creates a new project with the specified details.\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete projects",
        "description": "Deletes existing projects identified by their IDs.\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "IDs of the projects to delete"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve a project by ID",
        "description": "Fetches a project by its ID.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "include_child_assets",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a project",
        "description": "Updates an existing project by its ID.\n\n**Required Roles:** Admin, Owner, ProjectManager",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "x-roles",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner",
          "ProjectManager"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project",
        "description": "Deletes an existing project identified by its ID.\n\n**Required Roles:** Admin, Owner",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/bulk": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create multiple projects",
        "description": "Creates multiple projects with the specified details.\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectCreationRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/collisions": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve project asset collisions",
        "description": "Retrieves a paginated list of collisions between assets within projects.",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "The ID of the project to filter collisions for.",
            "schema": {
              "type": "integer",
              "description": "The ID of the project to filter collisions for.",
              "format": "int32"
            }
          },
          {
            "name": "asset_id",
            "in": "query",
            "description": "The ID of the asset to filter collisions for. If not provided, all collisions for the project will be returned.",
            "schema": {
              "type": "string",
              "description": "The ID of the asset to filter collisions for. If not provided, all collisions for the project will be returned.",
              "deprecated": true
            }
          },
          {
            "name": "asset_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetType"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination_token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectAssetCollisionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/collisions/count": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get the count of project asset collisions",
        "description": "Retrieves the total count of collisions between assets within projects based on the provided filter.",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "The ID of the project to filter collisions for.",
            "schema": {
              "type": "integer",
              "description": "The ID of the project to filter collisions for.",
              "format": "int32"
            }
          },
          {
            "name": "asset_id",
            "in": "query",
            "description": "The ID of the asset to filter collisions for. If not provided, all collisions for the project will be returned.",
            "schema": {
              "type": "string",
              "description": "The ID of the asset to filter collisions for. If not provided, all collisions for the project will be returned.",
              "deprecated": true
            }
          },
          {
            "name": "asset_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AssetType"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination_token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/calculate-collisions": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Calculate collisions on demand",
        "description": "Initiates an on-demand calculation of collisions based on the provided request.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollisionCalculationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOnDemandCollisionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/calculate-collisions/count": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Get the count of on-demand calculated collisions",
        "description": "Initiates an on-demand calculation of collisions and returns the total count based on the provided request.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollisionCalculationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/{repositoryId}/repository-project-ids": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project IDs associated with a given repository ID",
        "description": "Retrieves a list of project IDs that are associated with the specified repository ID.",
        "parameters": [
          {
            "name": "repositoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/projects/assets": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get assets associated with a given project",
        "description": "Fetches a paginated list of assets that are associated with the specified project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "Filters assets to include only those associated with the specified project ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Filters assets to include only those associated with the specified project ID.",
              "format": "int32"
            }
          },
          {
            "name": "asset_types",
            "in": "query",
            "description": "Filters assets to include only those matching the specified asset types.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AssetType"
              },
              "description": "Filters assets to include only those matching the specified asset types."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Asset"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/project-members": {
      "get": {
        "tags": [
          "Project Members"
        ],
        "summary": "Get project members",
        "description": "Fetches a paginated list of project members based on the provided filter criteria.",
        "parameters": [
          {
            "name": "project_ids",
            "in": "query",
            "description": "Filters projects to include only those specified by this list of project IDs.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filters projects to include only those specified by this list of project IDs."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectMember"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project Members"
        ],
        "summary": "Invite new members",
        "description": "Invites one or more new members based on the provided user details in the request body. Returns details of the invited members. Requires Admin, Owner, or Project Manager role.\n\n**Required Roles:** Admin, Owner, ProjectManager",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateUser"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateUser"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateUser"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitedMember"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner",
          "ProjectManager"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/project-members/team": {
      "get": {
        "tags": [
          "Project Members"
        ],
        "summary": "Get project team members",
        "description": "Fetches a paginated list of project team members based on the provided filter criteria.",
        "parameters": [
          {
            "name": "project_ids",
            "in": "query",
            "description": "Filters projects to include only those specified by this list of project IDs.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "Filters projects to include only those specified by this list of project IDs."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTeamMember"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/project-members/roles": {
      "post": {
        "tags": [
          "Project Members"
        ],
        "summary": "Assign roles to members",
        "description": "Assigns or updates roles for multiple members based on the provided list in the request body and the issuer's roles from the 'x-roles' header. Requires Admin, Owner, or Project Manager role.\n\n**Required Roles:** Admin, Owner, ProjectManager",
        "parameters": [
          {
            "name": "x-roles",
            "in": "header",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MemberRoleChangedRequest"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MemberRoleChangedRequest"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MemberRoleChangedRequest"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MemberRoleChangedRequest"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner",
          "ProjectManager"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/project-members/full-access": {
      "post": {
        "tags": [
          "Project Members"
        ],
        "summary": "Grant full access to specific members",
        "description": "Grants full access privileges to a specific set of project members identified by their IDs in the request body.\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MemberGrantFullAccess"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberGrantFullAccess"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberGrantFullAccess"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MemberGrantFullAccess"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/project-members/{memberId}": {
      "delete": {
        "tags": [
          "Project Members"
        ],
        "summary": "Delete a member",
        "description": "Removing a member from all projects they are associated with, identified by their ID provided in the route.\n\n**Required Roles:** Admin, Owner",
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/api-tokens/tenant": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Fetch API tokens for tenant",
        "description": "Fetches a paginated list of API tokens based on the provided filter criteria.",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListApiTokenDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/api-tokens/user": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Fetch API tokens for user",
        "description": "Fetches a paginated list of personal access tokens based on the provided filter criteria.",
        "parameters": [
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListApiTokenDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/api-tokens/tenant/generate": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Generate API token",
        "description": "Generates an API token for the tenant.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/api-tokens/user/generate": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Generate personal API token",
        "description": "Generates a personal API token for the tenant.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/api-tokens/tenant/{clientId}": {
      "delete": {
        "tags": [
          "Tokens"
        ],
        "summary": "Delete API token",
        "description": "Deletes an API token for the tenant.",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/api-tokens/user/{clientId}": {
      "delete": {
        "tags": [
          "Tokens"
        ],
        "summary": "Delete personal API token",
        "description": "Deletes a personal API token.",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/brokers": {
      "get": {
        "tags": [
          "Brokers"
        ],
        "summary": "Get all brokers",
        "description": "Retrieves a list of all brokers.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Brokers"
        ],
        "summary": "Create a new broker",
        "description": "Creates a new broker.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerCreation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerCreation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerCreation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Brokers"
        ],
        "summary": "Update a broker",
        "description": "Updates an existing broker.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Broker"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Broker"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Broker"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Broker"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/brokers/{brokerId}": {
      "get": {
        "tags": [
          "Brokers"
        ],
        "summary": "Get a broker",
        "description": "Retrieves a specific broker.",
        "parameters": [
          {
            "name": "brokerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Broker"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Brokers"
        ],
        "summary": "Delete a broker",
        "description": "Deletes a broker.",
        "parameters": [
          {
            "name": "brokerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/brokers/{brokerId}/analytics": {
      "get": {
        "tags": [
          "Brokers"
        ],
        "summary": "Get broker analytics",
        "description": "Retrieves analytics data for a specific broker.",
        "parameters": [
          {
            "name": "brokerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerAnalytics"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/brokers/metrics": {
      "get": {
        "tags": [
          "Brokers"
        ],
        "summary": "Get broker client metrics",
        "description": "Retrieves client metrics for brokers.",
        "parameters": [
          {
            "name": "created_before",
            "in": "query",
            "description": "The end date for the metrics query.",
            "schema": {
              "type": "string",
              "description": "The end date for the metrics query.",
              "format": "date-time"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "The start date for the metrics query.",
            "schema": {
              "type": "string",
              "description": "The start date for the metrics query.",
              "format": "date-time"
            }
          },
          {
            "name": "broker_id",
            "in": "query",
            "description": "The ID of the broker to filter by.",
            "schema": {
              "type": "string",
              "description": "The ID of the broker to filter by.",
              "format": "uuid"
            }
          },
          {
            "name": "max_data_points",
            "in": "query",
            "description": "The maximum number of data points to return per client.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of data points to return per client.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrokerClientResponseMetrics"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/brokers/integration/cycode-broker-controller.yaml": {
      "get": {
        "tags": [
          "Brokers"
        ],
        "summary": "Get deployment configuration",
        "description": "Downloads the broker deployment configuration file.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/brokers/integration/generate-token": {
      "post": {
        "tags": [
          "Brokers"
        ],
        "summary": "Generate broker token",
        "description": "Generates a new broker token for integration.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerIntegration"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerIntegration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerIntegration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BrokerIntegration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/controls/{controlId}": {
      "get": {
        "tags": [
          "Controls"
        ],
        "summary": "Get control by ID",
        "description": "Gets a single control by its ID.",
        "parameters": [
          {
            "name": "controlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Frameworks"
        ],
        "summary": "Delete custom control",
        "description": "Deletes a custom control.",
        "parameters": [
          {
            "name": "controlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/controls": {
      "get": {
        "tags": [
          "Controls"
        ],
        "summary": "Get all controls",
        "description": "Gets all controls.",
        "parameters": [
          {
            "name": "framework_id",
            "in": "query",
            "description": "The framework ID.",
            "schema": {
              "type": "integer",
              "description": "The framework ID.",
              "format": "int32"
            }
          },
          {
            "name": "practice_id",
            "in": "query",
            "description": "The practice ID.",
            "schema": {
              "type": "integer",
              "description": "The practice ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "self_attestation_only",
            "in": "query",
            "description": "A flag indicating whether to include only self-attested controls.",
            "schema": {
              "type": "boolean",
              "description": "A flag indicating whether to include only self-attested controls."
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RequirementStatus"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The project ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/controls/evidence/{evidenceId}": {
      "get": {
        "tags": [
          "Controls"
        ],
        "summary": "Get controls by evidence ID",
        "description": "Gets all controls associated with a specific evidence ID.",
        "parameters": [
          {
            "name": "evidenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/controls/status": {
      "put": {
        "tags": [
          "Controls"
        ],
        "summary": "Update control execution status",
        "description": "Updates the execution status of a control.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlStatusUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlStatusUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlStatusUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/control-evidence": {
      "post": {
        "tags": [
          "Control Evidence"
        ],
        "summary": "Connect evidence to control",
        "description": "Creates a connection between evidence and a control.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionMultipleProjects"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionMultipleProjects"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionMultipleProjects"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionMultipleProjects"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Control Evidence"
        ],
        "summary": "Remove evidence control connection",
        "description": "Removes the connection between evidence and a control",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionRemovalMultipleProjects"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionRemovalMultipleProjects"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionRemovalMultipleProjects"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlEvidenceConnectionRemovalMultipleProjects"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/evidence": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get evidence",
        "description": "Gets all evidence",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Create evidence",
        "description": "Creates a new evidence.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceCreation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceCreation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceCreation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/evidence/{evidenceId}": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get evidence by ID",
        "description": "Gets a single evidence by its ID.",
        "parameters": [
          {
            "name": "evidenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Create evidence link",
        "description": "Creates a new link for an evidence.",
        "parameters": [
          {
            "name": "evidenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceLinkCreation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceLinkCreation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceLinkCreation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EvidenceLinkCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Evidence"
        ],
        "summary": "Update evidence",
        "description": "Updates an evidence.",
        "parameters": [
          {
            "name": "evidenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "force",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument_Evidence"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Evidence"
        ],
        "summary": "Delete evidence",
        "description": "Deletes an evidence.",
        "parameters": [
          {
            "name": "evidenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/evidence/attached": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Get attached evidence",
        "description": "Gets all evidence that is attached to a control or requirement.",
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "integer",
              "description": "The project ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "control_id",
            "in": "query",
            "description": "The control ID.",
            "schema": {
              "type": "integer",
              "description": "The control ID.",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/evidence/{evidenceId}/{evidenceLinkId}/attachment": {
      "get": {
        "tags": [
          "Evidence"
        ],
        "summary": "Download attachment",
        "description": "Downloads an attachment from an evidence.",
        "parameters": [
          {
            "name": "evidenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "evidenceLinkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/evidence/{evidenceId}/attachment": {
      "post": {
        "tags": [
          "Evidence"
        ],
        "summary": "Upload attachment",
        "description": "Uploads an attachment to an evidence.",
        "parameters": [
          {
            "name": "evidenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/evidence/link/{evidenceLinkId}": {
      "delete": {
        "tags": [
          "Evidence"
        ],
        "summary": "Delete evidence link",
        "description": "Deletes a link from an evidence.",
        "parameters": [
          {
            "name": "evidenceLinkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/frameworks": {
      "get": {
        "tags": [
          "Frameworks"
        ],
        "summary": "Get all frameworks",
        "description": "Gets all frameworks.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Frameworks"
        ],
        "summary": "Create custom framework",
        "description": "Creates a new custom framework.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFrameworkCreation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFrameworkCreation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFrameworkCreation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFrameworkCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/frameworks/{frameworkId}": {
      "get": {
        "tags": [
          "Frameworks"
        ],
        "summary": "Get framework by ID",
        "description": "Gets a single framework by its ID.",
        "parameters": [
          {
            "name": "frameworkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "framework_id",
            "in": "query",
            "description": "The framework ID.",
            "schema": {
              "type": "integer",
              "description": "The framework ID.",
              "format": "int32"
            }
          },
          {
            "name": "practice_id",
            "in": "query",
            "description": "The practice ID.",
            "schema": {
              "type": "integer",
              "description": "The practice ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "self_attestation_only",
            "in": "query",
            "description": "A flag indicating whether to include only self-attested controls.",
            "schema": {
              "type": "boolean",
              "description": "A flag indicating whether to include only self-attested controls."
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RequirementStatus"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The project ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Frameworks"
        ],
        "summary": "Delete custom framework",
        "description": "Deletes a custom framework.",
        "parameters": [
          {
            "name": "frameworkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/framework-activation/{frameworkId}": {
      "get": {
        "tags": [
          "Framework Activation"
        ],
        "summary": "Get framework activation settings for a specific framework",
        "description": "Retrieves the framework activation settings for a specific framework.",
        "parameters": [
          {
            "name": "frameworkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrameworkActivation"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/framework-activation/enable": {
      "post": {
        "tags": [
          "Framework Activation"
        ],
        "summary": "Enable multiple frameworks",
        "description": "Enables multiple frameworks by their identifiers.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/framework-activation/disable": {
      "post": {
        "tags": [
          "Framework Activation"
        ],
        "summary": "Disable multiple frameworks",
        "description": "Disables multiple frameworks by their identifiers.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableMultipleFrameworksRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/practices/{practiceId}": {
      "get": {
        "tags": [
          "Practices"
        ],
        "summary": "Get practice by ID",
        "description": "Gets a single practice by its ID.",
        "parameters": [
          {
            "name": "practiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "framework_id",
            "in": "query",
            "description": "The framework ID.",
            "schema": {
              "type": "integer",
              "description": "The framework ID.",
              "format": "int32"
            }
          },
          {
            "name": "practice_id",
            "in": "query",
            "description": "The practice ID.",
            "schema": {
              "type": "integer",
              "description": "The practice ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "self_attestation_only",
            "in": "query",
            "description": "A flag indicating whether to include only self-attested controls.",
            "schema": {
              "type": "boolean",
              "description": "A flag indicating whether to include only self-attested controls."
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RequirementStatus"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The project ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Frameworks"
        ],
        "summary": "Delete custom practice",
        "description": "Deletes a custom practice.",
        "parameters": [
          {
            "name": "practiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/requirements/{requirementId}": {
      "get": {
        "tags": [
          "Requirements"
        ],
        "summary": "Get requirement by ID",
        "description": "Gets a single requirement by its ID.",
        "parameters": [
          {
            "name": "requirementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "framework_id",
            "in": "query",
            "description": "The framework ID.",
            "schema": {
              "type": "integer",
              "description": "The framework ID.",
              "format": "int32"
            }
          },
          {
            "name": "practice_id",
            "in": "query",
            "description": "The practice ID.",
            "schema": {
              "type": "integer",
              "description": "The practice ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "self_attestation_only",
            "in": "query",
            "description": "A flag indicating whether to include only self-attested controls.",
            "schema": {
              "type": "boolean",
              "description": "A flag indicating whether to include only self-attested controls."
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RequirementStatus"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The project ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Frameworks"
        ],
        "summary": "Delete custom requirement",
        "description": "Deletes a custom requirement.",
        "parameters": [
          {
            "name": "requirementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/stats/framework/{frameworkId}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get framework stats",
        "description": "Gets statistics for a specific framework.",
        "parameters": [
          {
            "name": "frameworkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "framework_id",
            "in": "query",
            "description": "The framework ID.",
            "schema": {
              "type": "integer",
              "description": "The framework ID.",
              "format": "int32"
            }
          },
          {
            "name": "practice_id",
            "in": "query",
            "description": "The practice ID.",
            "schema": {
              "type": "integer",
              "description": "The practice ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "self_attestation_only",
            "in": "query",
            "description": "A flag indicating whether to include only self-attested controls.",
            "schema": {
              "type": "boolean",
              "description": "A flag indicating whether to include only self-attested controls."
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RequirementStatus"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The project ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/stats/framework/{frameworkId}/recalculate": {
      "post": {
        "tags": [
          "Stats"
        ],
        "summary": "Recalculate framework stats",
        "description": "Triggers a recalculation of control executions for a specific framework.",
        "parameters": [
          {
            "name": "frameworkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "control_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/stats/practice/{practiceId}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get practice stats",
        "description": "Gets statistics for a specific practice.",
        "parameters": [
          {
            "name": "practiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "framework_id",
            "in": "query",
            "description": "The framework ID.",
            "schema": {
              "type": "integer",
              "description": "The framework ID.",
              "format": "int32"
            }
          },
          {
            "name": "practice_id",
            "in": "query",
            "description": "The practice ID.",
            "schema": {
              "type": "integer",
              "description": "The practice ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "self_attestation_only",
            "in": "query",
            "description": "A flag indicating whether to include only self-attested controls.",
            "schema": {
              "type": "boolean",
              "description": "A flag indicating whether to include only self-attested controls."
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RequirementStatus"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The project ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/stats/requirement/{requirementId}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get requirement stats",
        "description": "Gets statistics for a specific requirement.",
        "parameters": [
          {
            "name": "requirementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "framework_id",
            "in": "query",
            "description": "The framework ID.",
            "schema": {
              "type": "integer",
              "description": "The framework ID.",
              "format": "int32"
            }
          },
          {
            "name": "practice_id",
            "in": "query",
            "description": "The practice ID.",
            "schema": {
              "type": "integer",
              "description": "The practice ID.",
              "format": "int32"
            }
          },
          {
            "name": "requirement_id",
            "in": "query",
            "description": "The requirement ID.",
            "schema": {
              "type": "integer",
              "description": "The requirement ID.",
              "format": "int32"
            }
          },
          {
            "name": "self_attestation_only",
            "in": "query",
            "description": "A flag indicating whether to include only self-attested controls.",
            "schema": {
              "type": "boolean",
              "description": "A flag indicating whether to include only self-attested controls."
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RequirementStatus"
            }
          },
          {
            "name": "project_ids",
            "in": "query",
            "description": "The project ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "The project ID."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/stats/project-coverage/{frameworkId}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get project coverage stats",
        "description": "Gets project coverage statistics for a specific framework.",
        "parameters": [
          {
            "name": "frameworkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/stats/framework-trend/{frameworkId}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get framework trend",
        "description": "Gets the posture trend for a specific framework.",
        "parameters": [
          {
            "name": "frameworkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/compliance/stats/project-framework-postures": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get project framework postures",
        "description": "Gets the posture statistics for all project frameworks.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/container-images/repository-to-code-repository": {
      "get": {
        "tags": [
          "Container Image Code Repositories"
        ],
        "summary": "Get linked code repository by container image repository ID",
        "description": "Retrieves the entity that links a container image repository to its associated code repository, identified by the container image repository's unique ID.",
        "parameters": [
          {
            "name": "containerImageRepositoryId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerImageRepositoryCodeRepositoryConnection"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Container Image Code Repositories"
        ],
        "summary": "Upsert container image repository and code repository connection",
        "description": "Inserts or updates the entity that links a container image repository to its associated code repository.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerImageRepositoryToCodeRepositoryUpsert"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerImageRepositoryToCodeRepositoryUpsert"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerImageRepositoryToCodeRepositoryUpsert"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContainerImageRepositoryToCodeRepositoryUpsert"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/sbom/import": {
      "post": {
        "tags": [
          "SBOM"
        ],
        "summary": "Import SBOM",
        "description": "Imports an SBOM (Software Bill of Materials) file for processing. The SBOM data is provided in the request body as form data.",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "BusinessImpact",
                  "File",
                  "Name",
                  "Vendor"
                ],
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "description": "The name of the SBOM report."
                  },
                  "Vendor": {
                    "type": "string",
                    "description": "The vendor associated with the SBOM report."
                  },
                  "BusinessImpact": {
                    "$ref": "#/components/schemas/BusinessImpactType"
                  },
                  "File": {
                    "type": "string",
                    "description": "The SBOM file to be imported.",
                    "format": "binary"
                  },
                  "Owners": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of owner ids to associate with the imported SBOM report."
                  },
                  "Labels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of labels to associate with the imported SBOM report."
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "Vendor": {
                  "style": "form"
                },
                "BusinessImpact": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Owners": {
                  "style": "form"
                },
                "Labels": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/sbom/import/{id}": {
      "delete": {
        "tags": [
          "SBOM"
        ],
        "summary": "Delete import SBOM",
        "description": "Delete imports an SBOM (Software Bill of Materials).",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/sbom/import/bulk": {
      "delete": {
        "tags": [
          "SBOM"
        ],
        "summary": "Delete bulk import SBOM",
        "description": "Bulk delete imports an SBOM (Software Bill of Materials).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSbomBulkDeleteRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSbomBulkDeleteRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSbomBulkDeleteRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ImportSbomBulkDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSbomBulkDeleteResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSbomBulkDeleteResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportSbomBulkDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/sbom/import/{id}/replace": {
      "post": {
        "tags": [
          "SBOM"
        ],
        "summary": "Update Imported SBOM",
        "description": "Replace an existing imported SBOM identified by ID. The updated SBOM data is provided in the request body as form data. New ID will be generated.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "description": "The SBOM file to be imported.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceImportedSbomResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceImportedSbomResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceImportedSbomResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/custom-connector/new-scan": {
      "post": {
        "tags": [
          "Custom Connectors"
        ],
        "summary": "Request a new scan upload",
        "description": "Returns AWS S3 Bucket presigned URL details for upload file",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PreSignedPost"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreSignedPost"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreSignedPost"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/gitlab-vulnerability-reports/enable/{installationId}": {
      "post": {
        "tags": [
          "Vulnerability Report Syncs"
        ],
        "summary": "Enable vulnerability report sync",
        "description": "Enables vulnerability report synchronization for the specified installation.",
        "parameters": [
          {
            "name": "installationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/VulnerabilityReportSyncRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VulnerabilityReportSyncRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VulnerabilityReportSyncRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VulnerabilityReportSyncRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/gitlab-vulnerability-reports/disable/{installationId}": {
      "post": {
        "tags": [
          "Vulnerability Report Syncs"
        ],
        "summary": "Disable vulnerability report sync",
        "description": "Disables vulnerability report synchronization for the specified installation.",
        "parameters": [
          {
            "name": "installationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/kubernetes-integration": {
      "post": {
        "tags": [
          "Kubernetes integration"
        ],
        "summary": "Create a Kubernetes runner installation",
        "description": "Creates and registers a new Kubernetes runner installation based on the provided details. Returns the created installation object.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/K8SRunnerInstallation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/K8SRunnerInstallation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/K8SRunnerInstallation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/K8SRunnerInstallation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/K8SRunnerInstallation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Kubernetes integration"
        ],
        "summary": "Get all Kubernetes runner installations",
        "description": "Retrieves a list of all configured Kubernetes runner installations.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/K8SRunnerInstallation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/kubernetes-integration/{installationId}/generate-token": {
      "post": {
        "tags": [
          "Kubernetes integration"
        ],
        "summary": "Generate an API token for an installation",
        "description": "Generates a new API token for a specific Kubernetes runner installation, identified by its ID in the route. This token is used by the runner to authenticate with the Cycode platform.",
        "parameters": [
          {
            "name": "installationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesApiTokenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesApiTokenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesApiTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/kubernetes-integration/{installationId}": {
      "get": {
        "tags": [
          "Kubernetes integration"
        ],
        "summary": "Get a specific Kubernetes runner installation",
        "description": "Retrieves the details of a specific Kubernetes runner installation, identified by its ID in the route.",
        "parameters": [
          {
            "name": "installationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/K8SRunnerInstallation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Kubernetes integration"
        ],
        "summary": "Delete a Kubernetes runner installation",
        "description": "Deletes a specific Kubernetes runner installation, identified by its ID in the route.",
        "parameters": [
          {
            "name": "installationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/kubernetes-integration/cycode-kubernetes-controller.yaml": {
      "get": {
        "tags": [
          "Kubernetes integration"
        ],
        "summary": "Get the Kubernetes controller deployment YAML",
        "description": "Provides the `cycode-kubernetes-controller.yaml` file required for deploying the runner in a Kubernetes cluster.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels/bulk": {
      "post": {
        "tags": [
          "Labels"
        ],
        "summary": "Create multiple labels in bulk",
        "description": "Creates a list of new labels.\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels/by-resource": {
      "get": {
        "tags": [
          "Label Resources"
        ],
        "summary": "Get all labels associated to a resource",
        "description": "Fetches a paginated list of labels for the requested resource.",
        "parameters": [
          {
            "name": "resource_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sources",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLabelsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels/{labelName}/resources": {
      "post": {
        "tags": [
          "Labels"
        ],
        "summary": "Add a label to resources (Please use the new POST /resources endpoint instead)",
        "description": "Associates a specific label with a list of provided resources.\n\n**Required Roles:** Admin, Owner",
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Label Resources"
        ],
        "summary": "Get resources by label name (Please use the new POST /resources endpoint instead)",
        "description": "Retrieves a list of resources associated with a specific label name.",
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_source",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination_token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLabelResourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Labels"
        ],
        "summary": "Remove a label from resources (Please use the new DELETE /resources endpoint instead)",
        "description": "Removes a specific label from a list of provided resources.\n\n**Required Roles:** Admin, Owner",
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels/resources": {
      "post": {
        "tags": [
          "Label Resources"
        ],
        "summary": "Add a label to resources",
        "description": "Associates a specific label with a list of provided resources.\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Label Resources"
        ],
        "summary": "Get resources by label name",
        "description": "Retrieves a list of resources associated with a specific label name.",
        "parameters": [
          {
            "name": "label_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_source",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination_token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLabelResourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Label Resources"
        ],
        "summary": "Remove a label from resources",
        "description": "Removes a specific label from a list of provided resources.\n\n**Required Roles:** Admin, Owner",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LabelConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "X-Roles-Allowed": [
          "Admin",
          "Owner"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels/{labelName}/resources/count": {
      "get": {
        "tags": [
          "Label Resources"
        ],
        "summary": "Get the count of resources by label name (Please use the new POST /resources/count endpoint instead)",
        "description": "Retrieves the total count of resources associated with a specific label name, which can be further filtered using the provided query parameters.",
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_source",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination_token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels/resources/count": {
      "get": {
        "tags": [
          "Label Resources"
        ],
        "summary": "Get the count of resources by label name",
        "description": "Retrieves the total count of resources associated with a specific label name, which can be further filtered using the provided query parameters.",
        "parameters": [
          {
            "name": "label_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_source",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels": {
      "post": {
        "tags": [
          "Labels"
        ],
        "summary": "Create a label",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Labels"
        ],
        "summary": "List labels",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filters labels by partial text match in their names (case-insensitive).",
            "schema": {
              "type": "string",
              "description": "Filters labels by partial text match in their names (case-insensitive)."
            }
          },
          {
            "name": "names",
            "in": "query",
            "description": "Filters labels by exact name matches.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filters labels by exact name matches."
            }
          },
          {
            "name": "sources",
            "in": "query",
            "description": "Filters labels by their sources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filters labels by their sources."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pagination_token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLabelsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/labels/{id}": {
      "get": {
        "tags": [
          "Labels"
        ],
        "summary": "Get a label",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/{reportSuiteId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get report by ID",
        "description": "Retrieves the details of a specific report, identified by its ID provided in the route.",
        "parameters": [
          {
            "name": "reportSuiteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSuite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete a report",
        "description": "Deletes an existing report, identified by its ID in the route.",
        "parameters": [
          {
            "name": "reportSuiteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/execution-suites": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get paged list of report executions",
        "description": "Retrieves a paginated list of report executions based on the provided filter criteria.",
        "parameters": [
          {
            "name": "executions_ids",
            "in": "query",
            "description": "A list of specific report execution IDs to filter by.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "A list of specific report execution IDs to filter by."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A list of report statuses to filter the executions by.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReportStatus"
              },
              "description": "A list of report statuses to filter the executions by."
            }
          },
          {
            "name": "include_orphan_executions",
            "in": "query",
            "description": "Indicates whether to include report executions that are not associated with any report request.",
            "schema": {
              "type": "boolean",
              "description": "Indicates whether to include report executions that are not associated with any report request."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportExecutionsSuite"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/{reportSuiteId}/executions": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get report executions by report ID",
        "description": "Retrieves a paginated list of executions associated with a specific report, identified by report ID in the route.",
        "parameters": [
          {
            "name": "reportSuiteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "executions_ids",
            "in": "query",
            "description": "A list of specific report execution IDs to filter by.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "A list of specific report execution IDs to filter by."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A list of report statuses to filter the executions by.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReportStatus"
              },
              "description": "A list of report statuses to filter the executions by."
            }
          },
          {
            "name": "include_orphan_executions",
            "in": "query",
            "description": "Indicates whether to include report executions that are not associated with any report request.",
            "schema": {
              "type": "boolean",
              "description": "Indicates whether to include report executions that are not associated with any report request."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportExecutionsSuite"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get paged list of reports",
        "description": "Retrieves a paginated list of reports based on the provided filter criteria.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "A text string to search for within report names.",
            "schema": {
              "type": "string",
              "description": "A text string to search for within report names."
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "description": "A list of user identifiers to filter reports by their creators.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of user identifiers to filter reports by their creators."
            }
          },
          {
            "name": "time_period",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TimePeriod"
            }
          },
          {
            "name": "trigger_source",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TriggerSource"
            }
          },
          {
            "name": "report_execution_filter.status",
            "in": "query",
            "description": "A list of statuses to filter reports based on the status of their associated executions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReportStatus"
              },
              "description": "A list of statuses to filter reports based on the status of their associated executions."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportSuite"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a new report",
        "description": "Creates a new report based on the provided configuration in the request body.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteCreationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteCreationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteCreationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSuite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/executions": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get paged list of individual report executions",
        "description": "Retrieves a paginated list of individual report executions based on the provided filter criteria.",
        "parameters": [
          {
            "name": "executions_ids",
            "in": "query",
            "description": "A list of specific report execution IDs to filter by.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "description": "A list of specific report execution IDs to filter by."
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "A list of report statuses to filter the executions by.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReportStatus"
              },
              "description": "A list of report statuses to filter the executions by."
            }
          },
          {
            "name": "include_orphan_executions",
            "in": "query",
            "description": "Indicates whether to include report executions that are not associated with any report request.",
            "schema": {
              "type": "boolean",
              "description": "Indicates whether to include report executions that are not associated with any report request."
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportExecution"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/{reportSuiteId}/execute": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Execute a report",
        "description": "Triggers the execution of an existing report, identified by its ID in the route.",
        "parameters": [
          {
            "name": "reportSuiteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportExecutionsSuite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/standalone-execute": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Execute a standalone report",
        "description": "Triggers the execution of a standalone report based on the request body. This is used for reports not tied to a pre-existing configuration.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StandaloneReportExecutionRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StandaloneReportExecutionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StandaloneReportExecutionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StandaloneReportExecutionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportExecutionsSuite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/update": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Update an existing report",
        "description": "Updates an existing report based on the details provided in the request body.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportSuiteUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportSuite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/zipped-file/{entityType}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create and execute report from ZIP file",
        "description": "Creates and initiates the execution of a report by uploading a zipped file.",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "report_parameters": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                },
                "report_parameters": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportExecutionsSuite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/repository-url/{entityType}": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create and execute report from repository URL",
        "description": "Creates and initiates the execution of a report from a specified repository URL.",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository_url": {
                    "type": "string"
                  },
                  "report_parameters": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "repository_url": {
                  "style": "form"
                },
                "report_parameters": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportExecutionsSuite"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/reports/{reportExecutionSuiteId}/status": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Update report execution status",
        "description": "Receives the status update for a specific report execution, identified by report execution ID in the route.",
        "parameters": [
          {
            "name": "reportExecutionSuiteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/resource-ownership/owners": {
      "post": {
        "tags": [
          "Resource Owners"
        ],
        "summary": "Create owner",
        "description": "Creates a new owner resource based on the provided member ID.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerCreation"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerCreation"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerCreation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Owner"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/resource-ownership/resources/{resourceType}/{rootId}/{resourceId}/owners": {
      "get": {
        "tags": [
          "Resource Owners"
        ],
        "summary": "Get resource owners",
        "description": "Retrieves the list of owners associated with a specific resource, identified by its type, root ID, and resource ID.",
        "parameters": [
          {
            "name": "resourceType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedResourceType"
            }
          },
          {
            "name": "rootId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceOwnership"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/resource-ownership/resources/{resourceType}/{rootId}/{resourceId}/calculate": {
      "post": {
        "tags": [
          "Resource Owners"
        ],
        "summary": "Calculate resource ownership",
        "description": "Triggers the calculation of ownership for a specific resource, identified by its type, root ID, and resource ID. Returns the calculated list of owners.",
        "parameters": [
          {
            "name": "resourceType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OwnedResourceType"
            }
          },
          {
            "name": "rootId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceOwnership"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/resource-ownership/resources/toggle-resource-ownership": {
      "post": {
        "tags": [
          "Resource Owners"
        ],
        "summary": "Toggle resource owner state",
        "description": "Enables or disables a specific owner for a given resource, identified by details in the request body. Returns the updated list of owners for the resource.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwnerToggle"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwnerToggle"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwnerToggle"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwnerToggle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceOwnership"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/resource-ownership/resources/add-resource-ownership": {
      "post": {
        "tags": [
          "Resource Owners"
        ],
        "summary": "Add resource ownership",
        "description": "Manually assigns an owner to a specific resource, identified by details in the request body. Returns the updated list of owners for the resource.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwner"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwner"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwner"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceOwner"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceOwnership"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/scan-count": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get CLI scans count",
        "description": "Returns the count of CLI scans based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CliScansCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/plugin-adoption": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get CLI plugin adoption",
        "description": "Returns plugin adoption statistics for CLI tools based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PluginAdoption"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/plugin-adoption-by-ide": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get CLI plugin adoption by IDE",
        "description": "Returns plugin adoption statistics broken down by IDE based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PluginAdoptionByIde"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/user-versions": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get CLI user versions",
        "description": "Returns user count statistics by client versions based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserVersion"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/ide-scan-breakdown": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get IDE scan breakdown",
        "description": "Returns breakdown statistics for IDE scans based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScanByTypeBreakdown"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/cli-scan-breakdown": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get CLI scan breakdown",
        "description": "Returns breakdown statistics for CLI scans based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScanByTypeBreakdown"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/violations-over-time": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get violations over time",
        "description": "Returns violation statistics over time for CLI scans based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CliViolationsOverTime"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/top-cli-users": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get top CLI users",
        "description": "Returns statistics for the most active CLI users based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopScanUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/top-ide-users": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get top IDE users",
        "description": "Returns statistics for the most active IDE users based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopScanUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/cli/scans-by-version": {
      "get": {
        "tags": [
          "CLI scan statistics"
        ],
        "summary": "Get CLI scans by version",
        "description": "Returns scan statistics broken down by CLI version based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CliScanCountByVersionNumberBreakdown"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/violation-breakdown": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get pull request violations breakdown",
        "description": "Returns a breakdown of violations found in pull request scans based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ViolationsBreakdown"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/historical-violations": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get historical violations",
        "description": "Returns historical violation data for pull request scans over time based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoricalViolations"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/count": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get pull request count",
        "description": "Returns the count of pull requests scanned based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequestCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/count/total": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get total pull request count",
        "description": "Returns the total count of pull requests scanned based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequestsCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/count/open-violations": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get pull requests with open violations count",
        "description": "Returns the count of pull requests that have open violations based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequestsCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/count/resolved-violations": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get pull requests with resolved violations count",
        "description": "Returns the count of pull requests that have resolved violations based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequestsCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/count/dismissed-violations": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get pull requests with dismissed violations count",
        "description": "Returns the count of pull requests that have dismissed violations based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequestsCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/count/blocked": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get blocked pull requests count",
        "description": "Returns the count of blocked pull requests based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullRequestsCount"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/statistics/pull-requests/historical-mttr": {
      "get": {
        "tags": [
          "Pull requests scan statistics"
        ],
        "summary": "Get historical mean time to resolution",
        "description": "Returns historical mean time to resolution (MTTR) data for pull request violations based on the specified filter criteria.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "organization_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "repository_ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanStatus"
              }
            }
          },
          {
            "name": "scan_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ScanType"
              }
            }
          },
          {
            "name": "severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetectionSeverity"
              }
            }
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "developer_count_limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cli_client",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CliClient"
              }
            }
          },
          {
            "name": "cli_version",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "results_found",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistoricalViolationsMttr"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/pull-request-scoped-settings/{type}/{scopeId}": {
      "get": {
        "tags": [
          "Pull request scoped scan settings"
        ],
        "summary": "Get scoped scan settings",
        "description": "Returns a list of pull request scoped scan settings associated with the specified scoped ID and configuration type. Useful for fetching scan configuration details for a specific project, or other entity.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ScopeType"
            }
          },
          {
            "name": "scopeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Pull request scoped scan settings"
        ],
        "summary": "Delete scoped scan settings",
        "description": "Deletes scoped scan settings associated with the specified scoped ID and configuration type.",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ScopeType"
            }
          },
          {
            "name": "scopeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/scans/pull-request-scoped-settings": {
      "post": {
        "tags": [
          "Pull request scoped scan settings"
        ],
        "summary": "Create a new scoped scan settings",
        "description": "Creates a new set of pull request scoped scan settings using the provided details. Also associates the specified assets with the new scan settings.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopedPullRequestSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Pull request scoped scan settings"
        ],
        "summary": "Delete multiple scoped scan settings",
        "description": "Deletes multiple scoped scan settings associated with the specified scoped ID and configuration type.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Scope"
                },
                "description": "Scopes to delete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Create workflow",
        "description": "Creates a new workflow with the specified configuration, triggers, and actions.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowCreationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowCreationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowCreationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflows",
        "description": "Retrieves a paginated list of workflows based on the provided filter criteria.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "is_enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "integration_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "remediation_action",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_remediation_actions",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "workflows_having_enabled_action_only",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "workflow_action_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowActionType"
              }
            }
          },
          {
            "name": "trigger_type",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TriggerType"
              }
            }
          },
          {
            "name": "workflow_source",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowSource"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "should_apply_retroactively",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_change_trigger_workflow_only",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/count": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflows count",
        "description": "Retrieves the total count of workflows matching the provided filter.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "is_enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_deleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "integration_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "remediation_action",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_remediation_actions",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "workflows_having_enabled_action_only",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "workflow_action_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowActionType"
              }
            }
          },
          {
            "name": "trigger_type",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TriggerType"
              }
            }
          },
          {
            "name": "workflow_source",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowSource"
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "should_apply_retroactively",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_change_trigger_workflow_only",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowsCount"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/{workflowId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow by ID",
        "description": "Retrieves a specific workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Workflows"
        ],
        "summary": "Update workflow",
        "description": "Updates an existing workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/{workflowId}/jobs": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow jobs",
        "description": "Retrieves a paginated list of jobs for a specific workflow, identified by its ID in the route.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatusType"
              }
            }
          },
          {
            "name": "workflow_action_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowActionType"
              }
            }
          },
          {
            "name": "trigger_type",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TriggerType"
              }
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowJob"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/{workflowId}/jobs/count": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow jobs count",
        "description": "Retrieves the total count of jobs for a specific workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatusType"
              }
            }
          },
          {
            "name": "workflow_action_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowActionType"
              }
            }
          },
          {
            "name": "trigger_type",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TriggerType"
              }
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCount"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/{workflowId}/enable": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Enable workflow",
        "description": "Enables a specific workflow, identified by its ID in the route, by updating its state to active.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/{workflowId}/disable": {
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Disable workflow",
        "description": "Disables a specific workflow.",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/jobs": {
      "get": {
        "tags": [
          "Workflow Jobs"
        ],
        "summary": "Get workflow jobs",
        "description": "Retrieves a paginated list of workflow jobs based on the provided filter criteria.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatusType"
              }
            }
          },
          {
            "name": "workflow_action_types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowActionType"
              }
            }
          },
          {
            "name": "trigger_type",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TriggerType"
              }
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items to return per page.",
            "schema": {
              "type": "integer",
              "description": "The maximum number of items to return per page.",
              "format": "int32"
            }
          },
          {
            "name": "next_page_token",
            "in": "query",
            "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination.",
            "schema": {
              "type": "string",
              "description": "A token representing the position to fetch the next page of results from. Used for cursor-based pagination."
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Specifies the field(s) to sort the results by. By default, sorting is ascending. Prefix the field name with a hyphen (`-`) for descending order (e.g., `name` for ascending, `-name` for descending). Provide multiple values for multi-field sorting."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowJob"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/v4/workflows/jobs/{workflowJobId}": {
      "get": {
        "tags": [
          "Workflow Jobs"
        ],
        "summary": "Get workflow job by ID",
        "description": "Retrieves a specific workflow job.",
        "parameters": [
          {
            "name": "workflowJobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowJob"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AuditLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the audit log.",
            "format": "int32"
          },
          "subject_id": {
            "type": "string",
            "description": "The identifier for the subject of the audit action."
          },
          "external_actor_id": {
            "type": "string",
            "description": "The actor's external identifier.",
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "description": "The type of subject being audited."
          },
          "action": {
            "type": "string",
            "description": "The action performed in the audit log."
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the action.",
            "format": "date-time"
          },
          "ip_address": {
            "type": "string",
            "description": "IP address from which the action was performed, if available.",
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "description": "User agent string of the actor.",
            "nullable": true
          },
          "actor_id": {
            "type": "string",
            "description": "The identifier for the actor performing the action.",
            "nullable": true
          },
          "external_actor_provider": {
            "type": "string",
            "description": "Provider of the external actor (if any).",
            "nullable": true
          },
          "delta": {
            "description": "Changes made during the action, represented as a delta.",
            "nullable": true
          },
          "old_entity": {
            "description": "Representation of the entity before changes.",
            "nullable": true
          },
          "new_entity": {
            "description": "Representation of the entity after changes.",
            "nullable": true
          },
          "reviewed": {
            "type": "boolean",
            "description": "Indicates whether the audit log has been reviewed."
          },
          "is_activity_log": {
            "type": "boolean",
            "description": "Indicates whether this log represents an activity log or an audit log."
          },
          "last_reviewed_by": {
            "type": "string",
            "description": "ID of the user who last reviewed this audit log.",
            "nullable": true
          },
          "last_reviewed_at": {
            "type": "string",
            "description": "Timestamp of the last review of this audit log.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListAuditLogsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLog"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "description": "Request trace identifier.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchBy": {
        "enum": [
          "subject_id"
        ],
        "type": "string"
      },
      "ApiTokenDetails": {
        "required": [
          "clientId",
          "createdAt",
          "createdByUserId",
          "description",
          "secret"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The unique client ID for the API token."
          },
          "internalClientId": {
            "type": "string",
            "description": "The legacy unique client ID for the API token.",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "description": "The secret associated with the client ID."
          },
          "description": {
            "type": "string",
            "description": "The description provided for the API token."
          },
          "createdByUserId": {
            "type": "string",
            "description": "The unique identifier of the user who created this API token."
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time when the API token was created (ISO 8601 format).",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ApiTokenRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description for the API token, helping to identify its purpose.",
            "nullable": true
          },
          "metadata": {
            "description": "Arbitrary metadata to associate with the API token. Can be a JSON object containing key-value pairs.",
            "nullable": true
          },
          "roleIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of unique identifiers for the roles to be assigned to the API token.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Asset": {
        "required": [
          "asset_id",
          "collisions_count",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "asset_type": {
            "$ref": "#/components/schemas/AssetType"
          },
          "asset_id": {
            "type": "string"
          },
          "asset_graph_node_id": {
            "type": "string",
            "nullable": true
          },
          "asset_parent_id": {
            "type": "string",
            "nullable": true
          },
          "asset_parent_type": {
            "$ref": "#/components/schemas/AssetParentType"
          },
          "asset_provider": {
            "$ref": "#/components/schemas/ProviderEnum"
          },
          "collisions_count": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "AssetParentType": {
        "enum": [
          "Repository",
          "Organization",
          "Label",
          "Team",
          "ScmProject",
          "DetectionCategory"
        ],
        "type": "string"
      },
      "AssetType": {
        "enum": [
          "Repository",
          "Organization",
          "Label",
          "AwsCloudAccount",
          "GcpCloudAccount",
          "AzureCloudAccount",
          "K8SCloudAccount",
          "BuildAccount",
          "ContainerRegistryAccount",
          "ContainerRepository",
          "CodeProject",
          "Team",
          "ScmProject",
          "DetectionCategory",
          "CloudAccount",
          "SecurityToolAccount",
          "SecurityToolProject",
          "Website",
          "BugBountyAsset"
        ],
        "type": "string"
      },
      "BusinessImpactType": {
        "enum": [
          "Low",
          "Medium",
          "High"
        ],
        "type": "string"
      },
      "CollisionCalculationRequest": {
        "required": [
          "entity_id",
          "entity_type",
          "page_number",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "page_number": {
            "type": "integer",
            "format": "int32"
          },
          "page_size": {
            "type": "integer",
            "format": "int32"
          },
          "pagination_token": {
            "type": "string",
            "nullable": true
          },
          "sort_by": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "entity_id": {
            "type": "string",
            "description": "The unique identifier for the entity (e.g. repository ID)."
          },
          "entity_type": {
            "$ref": "#/components/schemas/AssetType"
          },
          "project_id": {
            "type": "integer",
            "description": "The ID of the project this entity belongs to.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateUser": {
        "required": [
          "email",
          "name",
          "project_ids",
          "skip_invite"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the user being invited. This field is required."
          },
          "name": {
            "type": "string",
            "description": "The full name of the user being invited. This field is required."
          },
          "role": {
            "$ref": "#/components/schemas/UserRoleType"
          },
          "project_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of project IDs to which the user will have access."
          },
          "skip_invite": {
            "type": "boolean",
            "description": "Indicates whether to skip sending the invitation email to the user. Defaults to 'false'."
          }
        },
        "additionalProperties": false
      },
      "EntityCount": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Group": {
        "required": [
          "created",
          "created_by",
          "groups_count",
          "id",
          "members_count",
          "modified",
          "modified_by",
          "name",
          "projects_count"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the group",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The date and time when the group was created.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the group was last modified.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the group."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the group.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of the group. Values include: 'Application', 'Business Unit', 'Department', 'Product Area', 'Product Family', 'Team', 'Other'.",
            "nullable": true
          },
          "created_by": {
            "type": "string",
            "description": "The Cycode user ID who created the group."
          },
          "modified_by": {
            "type": "string",
            "description": "The Cycode user ID who last modified the group."
          },
          "parent_group_id": {
            "type": "integer",
            "description": "The unique identifier of the parent group, if this group is a sub-group. Null if the group has no parent.",
            "format": "int32",
            "nullable": true
          },
          "projects_count": {
            "type": "integer",
            "description": "Count of projects under the group.",
            "format": "int32"
          },
          "groups_count": {
            "type": "integer",
            "description": "Count of groups under the group.",
            "format": "int32"
          },
          "members_count": {
            "type": "integer",
            "description": "Count of members of the group.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GroupCreationRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group, which must be unique."
          },
          "description": {
            "type": "string",
            "description": "An optional description of the group.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type according to the data you wish to track and monitor. Acceptable values include: 'Application', 'Business Unit', 'Department', 'Product Area', 'Product Family', 'Team', 'Other'.",
            "nullable": true
          },
          "parent_group_id": {
            "type": "integer",
            "description": "The ID of an existing group, required if this group is a sub-group.",
            "format": "int32",
            "nullable": true
          },
          "member_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of existing Cycode user IDs to be assigned to the group.",
            "nullable": true
          },
          "members_to_invite": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUser"
            },
            "description": "A list of users to invite to the group.",
            "nullable": true
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of project IDs to associate with this group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupMember": {
        "required": [
          "created",
          "group_id",
          "id",
          "member_id",
          "modified"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the group member",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The date and time when the group member was created.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the group member was last modified.",
            "format": "date-time"
          },
          "member_id": {
            "type": "string",
            "description": "Unique identifier for the user"
          },
          "group_id": {
            "type": "integer",
            "description": "Unique identifier for the group",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GroupUpdateRequest": {
        "required": [
          "members_to_add",
          "members_to_invite",
          "members_to_remove",
          "projects_to_add",
          "projects_to_remove"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The updated name of the group. If no change is required, the existing value must be sent.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The updated description of the group. If no change is required, the existing value must be sent.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The updated type according to the data you wish to track and monitor. Acceptable values include: 'Application', 'Business Unit', 'Department', 'Product Area', 'Product Family', 'Team', 'Other'. If no change is required, the existing value must be sent.",
            "nullable": true
          },
          "parent_group_id": {
            "type": "integer",
            "description": "The updated ID of the parent group, if applicable. If no change is required, the existing value must be sent.",
            "format": "int32",
            "nullable": true
          },
          "members_to_add": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of Cycode user IDs to add to the group."
          },
          "members_to_remove": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of Cycode user IDs to remove from the group."
          },
          "members_to_invite": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUser"
            },
            "description": "A list of new users to invite to the group."
          },
          "projects_to_add": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of project IDs to add to the group."
          },
          "projects_to_remove": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of project IDs to remove from the group."
          }
        },
        "additionalProperties": false
      },
      "HierarchyEntity": {
        "required": [
          "assets_summaries",
          "collisions_count",
          "created",
          "entity_id",
          "hierarchy_entity_type",
          "members_count",
          "modified",
          "name"
        ],
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "integer",
            "description": "The unique ID of the hierarchy entity.",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The creation timestamp of the entity.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The last modified timestamp of the entity.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the hierarchy entity."
          },
          "description": {
            "type": "string",
            "description": "Optional description of the entity.",
            "nullable": true
          },
          "created_by": {
            "type": "string",
            "description": "User who created the entity.",
            "nullable": true
          },
          "parent_group_id": {
            "type": "integer",
            "description": "ID of the parent group.",
            "format": "int32",
            "nullable": true
          },
          "max_risk_score": {
            "type": "number",
            "description": "Maximum risk score observed for the entity.",
            "format": "double",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of the hierarchy entity.",
            "nullable": true
          },
          "business_impact": {
            "$ref": "#/components/schemas/BusinessImpactType"
          },
          "max_risked_detection_id": {
            "type": "string",
            "description": "Detection ID that corresponds to the max risk score.",
            "format": "uuid",
            "nullable": true
          },
          "max_risk_score_sampled_at": {
            "type": "string",
            "description": "Timestamp when the max risk score was sampled.",
            "format": "date-time",
            "nullable": true
          },
          "hierarchy_entity_type": {
            "$ref": "#/components/schemas/HierarchyEntityType"
          },
          "members_count": {
            "type": "integer",
            "description": "Number of members associated with the entity.",
            "format": "int32"
          },
          "assets_summaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HierarchyEntityAssetSummary"
            },
            "description": "List of summaries for assets under this entity."
          },
          "collisions_count": {
            "type": "integer",
            "description": "Number of collisions detected in this entity.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "HierarchyEntityAssetSummary": {
        "required": [
          "asset_type",
          "assets_count"
        ],
        "type": "object",
        "properties": {
          "asset_type": {
            "type": "string"
          },
          "assets_count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "HierarchyEntityPath": {
        "required": [
          "entity_id",
          "hierarchy_entity_type",
          "name"
        ],
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "integer",
            "description": "The unique ID of the hierarchy entity.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the hierarchy entity."
          },
          "parent_group_id": {
            "type": "integer",
            "description": "ID of the parent group.",
            "format": "int32",
            "nullable": true
          },
          "hierarchy_entity_type": {
            "$ref": "#/components/schemas/HierarchyEntityType"
          }
        },
        "additionalProperties": false
      },
      "HierarchyEntityType": {
        "enum": [
          "Project",
          "Group"
        ],
        "type": "string"
      },
      "InvitedMember": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user."
          },
          "id": {
            "type": "string",
            "description": "The unique User ID.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListApiTokenDetailsResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiTokenDetails"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListGroupMembersResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMember"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListGroupsResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListHierarchyEntitysResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HierarchyEntity"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListOnDemandCollisionsResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OnDemandCollision"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListProjectAssetCollisionsResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectAssetCollision"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListProjectsResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListUsersResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Member": {
        "required": [
          "email",
          "member_id"
        ],
        "type": "object",
        "properties": {
          "member_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MemberGrantFullAccess": {
        "required": [
          "member_ids"
        ],
        "type": "object",
        "properties": {
          "member_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of existing Cycode user IDs to receive full access."
          }
        },
        "additionalProperties": false
      },
      "MemberMfaQr": {
        "required": [
          "qrCode"
        ],
        "type": "object",
        "properties": {
          "qrCode": {
            "type": "string",
            "description": "The QR code used to enroll an authenticator app."
          }
        },
        "additionalProperties": false
      },
      "MemberPassword": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MemberRoleChangedRequest": {
        "required": [
          "assigned_role",
          "member_id"
        ],
        "type": "object",
        "properties": {
          "member_id": {
            "type": "string"
          },
          "current_role": {
            "$ref": "#/components/schemas/UserRoleType"
          },
          "assigned_role": {
            "$ref": "#/components/schemas/UserRoleType"
          }
        },
        "additionalProperties": false
      },
      "OnDemandCollision": {
        "required": [
          "colliding_asset_id",
          "colliding_asset_type",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "project_id": {
            "type": "integer",
            "description": "The unique identifier of the project where the collision occurred.",
            "format": "int32"
          },
          "colliding_asset_id": {
            "type": "string",
            "description": "The identifier of the asset involved in the collision."
          },
          "colliding_asset_parent_id": {
            "type": "string",
            "description": "The identifier of the parent asset of the colliding asset, if applicable.",
            "nullable": true
          },
          "colliding_asset_type": {
            "$ref": "#/components/schemas/AssetType"
          },
          "colliding_asset_parent_type": {
            "$ref": "#/components/schemas/AssetParentType"
          }
        },
        "additionalProperties": false
      },
      "Project": {
        "required": [
          "assets",
          "created",
          "has_collisions",
          "id",
          "is_archived",
          "labels",
          "members",
          "modified",
          "name",
          "project_issue_trackings",
          "team_members"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the project.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the project."
          },
          "description": {
            "type": "string",
            "description": "An optional description for the project.",
            "nullable": true
          },
          "business_impact": {
            "$ref": "#/components/schemas/BusinessImpactType"
          },
          "is_archived": {
            "type": "boolean",
            "description": "Indicates whether the project is currently archived or active."
          },
          "created": {
            "type": "string",
            "description": "The date and time when the project was created.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the project was last modified.",
            "format": "date-time"
          },
          "created_by": {
            "type": "string",
            "description": "The Cycode user ID who created the group.",
            "nullable": true
          },
          "max_risk_score": {
            "type": "number",
            "description": "The maximum risk score calculated for this project, if available.",
            "format": "double",
            "nullable": true
          },
          "max_risked_detection_id": {
            "type": "string",
            "description": "The ID of the specific detection associated with the maximum risk score, if available.",
            "format": "uuid",
            "nullable": true
          },
          "max_risk_score_sampled_at": {
            "type": "string",
            "description": "The date and time when the maximum risk score was calculated or sampled.",
            "format": "date-time",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "team_members": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            }
          },
          "project_type": {
            "type": "string",
            "nullable": true
          },
          "parent_group_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_collisions": {
            "type": "boolean"
          },
          "project_issue_trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectIssueTracking"
            }
          }
        },
        "additionalProperties": false
      },
      "ProjectAssetCollision": {
        "required": [
          "created",
          "id",
          "modified",
          "project_a",
          "project_asset_a",
          "project_asset_b",
          "project_b"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the project asset collision.",
            "format": "uuid"
          },
          "project_asset_a": {
            "$ref": "#/components/schemas/Asset"
          },
          "project_asset_b": {
            "$ref": "#/components/schemas/Asset"
          },
          "project_a": {
            "$ref": "#/components/schemas/ProjectSummary"
          },
          "project_b": {
            "$ref": "#/components/schemas/ProjectSummary"
          },
          "created": {
            "type": "string",
            "description": "The date and time when the collision was created.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the collision was last modified.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ProjectCreationRequest": {
        "required": [
          "assets",
          "business_impact",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the new project."
          },
          "description": {
            "type": "string",
            "description": "An optional description for the new project.",
            "nullable": true
          },
          "business_impact": {
            "$ref": "#/components/schemas/BusinessImpactType"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            },
            "description": "A list of assets to be included in the new project."
          },
          "members": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of identifiers of existing members to add to the new project. Consider using `members_v2` for richer member details.",
            "nullable": true
          },
          "members_v2": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "A set of member details for existing members to add to the new project.",
            "nullable": true
          },
          "team_members": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "description": "A set of team member details to associate with the new project.",
            "nullable": true
          },
          "members_to_invite": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUser"
            },
            "description": "A set of user details for new users to be invited or created and added to the project.",
            "nullable": true
          },
          "project_issue_trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectIssueTracking"
            },
            "description": "A set of issue tracking integrations available for project detections.",
            "nullable": true
          },
          "project_type": {
            "type": "string",
            "description": "An optional type categorization for the new project.",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of labels or tags to apply to the new project upon creation.",
            "nullable": true
          },
          "parent_group_id": {
            "type": "integer",
            "description": "The ID of an existing group, project should belong to.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectIds": {
        "required": [
          "project_ids"
        ],
        "type": "object",
        "properties": {
          "project_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A set of unique project identifiers."
          }
        },
        "additionalProperties": false
      },
      "ProjectIssueTracking": {
        "required": [
          "integration_id"
        ],
        "type": "object",
        "properties": {
          "integration_id": {
            "type": "string"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectMember": {
        "required": [
          "email",
          "member_id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "project_id": {
            "type": "string",
            "description": "Unique identifier for the project."
          },
          "member_id": {
            "type": "string",
            "description": "Unique identifier for the user."
          },
          "email": {
            "type": "string",
            "description": "The email address of the user."
          }
        },
        "additionalProperties": false
      },
      "ProjectSummary": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProjectTeamMember": {
        "required": [
          "email",
          "member_id",
          "project_id",
          "team_id",
          "team_member_id",
          "was_role_changed"
        ],
        "type": "object",
        "properties": {
          "team_member_id": {
            "type": "string",
            "description": "Unique identifier for the team member."
          },
          "team_id": {
            "type": "string",
            "description": "Unique identifier for the team."
          },
          "project_id": {
            "type": "integer",
            "description": "Unique identifier for the project.",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "description": "The email address of the user."
          },
          "role": {
            "$ref": "#/components/schemas/UserRoleType"
          },
          "scm_provider": {
            "$ref": "#/components/schemas/ScmProvider"
          },
          "member_id": {
            "type": "string",
            "description": "Unique identifier for the member within the specified SCM provider system."
          },
          "was_role_changed": {
            "type": "boolean",
            "description": "Indicates if the member's project role has been changed."
          }
        },
        "additionalProperties": false
      },
      "ProjectUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name for the project. If provided, updates the existing name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The new description for the project. Provide an empty string to clear the existing description, or omit to leave it unchanged.",
            "nullable": true
          },
          "business_impact": {
            "$ref": "#/components/schemas/BusinessImpactType"
          },
          "assets_to_add": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            },
            "description": "A list of assets to associate with the project.",
            "nullable": true
          },
          "assets_to_remove": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asset"
            },
            "description": "A list of assets to disassociate from the project.",
            "nullable": true
          },
          "members_to_add": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of identifiers (user IDs) of existing members to add to the project. Consider using `members_to_add_v2` for richer details.",
            "nullable": true
          },
          "members_to_add_v2": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "A set of member details for existing members to add to the project.",
            "nullable": true
          },
          "members_to_remove": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of identifiers (user IDs) of members to remove from the project. Consider using `members_to_remove_v2`.",
            "nullable": true
          },
          "members_to_remove_v2": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "A set of member details to remove from the project.",
            "nullable": true
          },
          "team_members_to_add": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "description": "A set of team member details to add to the project's team associations.",
            "nullable": true
          },
          "team_members_to_remove": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "description": "A set of team member details to remove from the project's team associations.",
            "nullable": true
          },
          "members_to_invite": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateUser"
            },
            "description": "A set of user details for new users to be invited (or created) and added to the project during the update.",
            "nullable": true
          },
          "project_issue_trackings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectIssueTracking"
            },
            "nullable": true
          },
          "project_type": {
            "type": "string",
            "description": "An optional type categorization for the new project.",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The complete list of labels or tags for the project. This will replace the existing list of labels.",
            "nullable": true
          },
          "parent_group_id": {
            "type": "integer",
            "description": "The ID of an existing group, project should belong to.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProviderEnum": {
        "enum": [
          "Github",
          "BitbucketCloud",
          "BitbucketSnippet",
          "GithubGist",
          "GithubEnterprise",
          "GitlabCloud",
          "GitlabEnterprise",
          "BitbucketServer",
          "AzureDevopsCloud",
          "GitlabSnippet",
          "Kubernetes",
          "Aws",
          "CloudFormation",
          "Dockerfile",
          "Azure",
          "Gcp",
          "Terraform",
          "CircleCi",
          "Jenkins",
          "Dockerhub",
          "Jfrog",
          "Arm",
          "Terraformer",
          "Gerrit",
          "GithubActionWorkflow",
          "TerraformState",
          "TerraformCloud",
          "AdvisoryDatabase",
          "NPMPackageRepository",
          "MavenPackageRepository",
          "SBTPackageRepository",
          "PyPIPackageRepository",
          "GoPackageRepository",
          "ComposerPackageRepository",
          "RubyGemsPackageRepository",
          "CratesPackageRepository",
          "NugetPackageRepository",
          "AzureDevopsEnterprise",
          "CycodeCli",
          "ExternalScanner",
          "Slack",
          "Ecr",
          "Lfs",
          "Nexus",
          "Confluence",
          "BlackDuck",
          "Wiz",
          "Coverity",
          "Dependabot",
          "Jira",
          "CoverityPolaris",
          "Semgrep",
          "Bearer",
          "SemgrepEnterprise",
          "SonarQube",
          "Checkmarx",
          "Invicti",
          "SonarCloud",
          "GenericContainerRegistry",
          "Harness",
          "BuildKite",
          "Quay",
          "HelixCore",
          "HelixCoreCloud",
          "Teams",
          "Noname",
          "Mend",
          "BurpSuite",
          "Tenable",
          "Snyk",
          "Sysdig",
          "Fortify",
          "Traceable",
          "HackerOne",
          "Salt",
          "Anchore",
          "Orca",
          "PrismaCloud",
          "GenericConnector",
          "CodeQL",
          "ServiceNowCmdb",
          "CrowdStrike",
          "Sharepoint",
          "Veracode",
          "Upwind",
          "ConfluenceDataCenter",
          "PlasticScm",
          "JiraDataCenter",
          "GitlabSecurity",
          "JfrogXray",
          "FortifyServer",
          "BlackDuckContinuousDynamic",
          "Cloudflare",
          "NexusIqServer",
          "Bright"
        ],
        "type": "string"
      },
      "ScmProvider": {
        "enum": [
          "BitbucketCloud",
          "BitbucketServer",
          "Github",
          "GithubEnterprise",
          "GitlabCloud",
          "GitlabEnterprise",
          "Gerrit",
          "AzureDevopsCloud",
          "AzureDevopsEnterprise",
          "PlasticScm"
        ],
        "type": "string"
      },
      "TeamMember": {
        "required": [
          "email",
          "member_id",
          "team_id",
          "team_member_id",
          "was_role_changed"
        ],
        "type": "object",
        "properties": {
          "team_member_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserRoleType"
          },
          "scm_provider": {
            "$ref": "#/components/schemas/ScmProvider"
          },
          "member_id": {
            "type": "string"
          },
          "was_role_changed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "required": [
          "email",
          "mfa_enrolled",
          "name",
          "roles",
          "skip_invite",
          "tenant_id"
        ],
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "external_id": {
            "type": "string",
            "nullable": true
          },
          "external_nickname": {
            "type": "string",
            "nullable": true
          },
          "profile_picture_url": {
            "type": "string",
            "nullable": true
          },
          "created_date": {
            "type": "string",
            "nullable": true
          },
          "updated_date": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tenant_ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "skip_invite": {
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "current_tenant_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "mfa_enrolled": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRole": {
        "required": [
          "roles",
          "tenant_id"
        ],
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string",
            "description": "The unique identifier of the tenant.",
            "format": "uuid"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of roles assigned to the user within the tenant."
          }
        },
        "additionalProperties": false
      },
      "UserRoleType": {
        "enum": [
          "None",
          "Viewer",
          "Developer",
          "Member",
          "ProjectManager",
          "Admin",
          "Owner"
        ],
        "type": "string"
      },
      "Broker": {
        "required": [
          "broker_state",
          "created_at",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The broker ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the broker."
          },
          "broker_state": {
            "$ref": "#/components/schemas/BrokerState"
          },
          "last_heartbeat": {
            "type": "string",
            "description": "The last heartbeat timestamp of the broker.",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "The creation timestamp of the broker.",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "description": "The version of the broker client.",
            "nullable": true
          },
          "client_settings": {
            "$ref": "#/components/schemas/BrokerClientSettings"
          },
          "analytics": {
            "$ref": "#/components/schemas/BrokerAnalytics"
          }
        },
        "additionalProperties": false
      },
      "BrokerAnalytics": {
        "required": [
          "broker_client_replicas",
          "calculated_at",
          "calculation_interval_in_minutes",
          "clone_growth_rate",
          "pending_clones",
          "pending_tasks",
          "task_completion_rate",
          "task_growth_rate"
        ],
        "type": "object",
        "properties": {
          "pending_clones": {
            "type": "integer",
            "description": "The number of pending clones.",
            "format": "int32"
          },
          "pending_tasks": {
            "type": "integer",
            "description": "The number of pending tasks.",
            "format": "int32"
          },
          "broker_client_replicas": {
            "type": "integer",
            "description": "The number of broker client replicas.",
            "format": "int64"
          },
          "task_completion_rate": {
            "type": "number",
            "description": "The task completion rate.",
            "format": "double"
          },
          "clone_growth_rate": {
            "type": "number",
            "description": "The average growth rate of clones.",
            "format": "double"
          },
          "task_growth_rate": {
            "type": "number",
            "description": "The average growth rate of tasks.",
            "format": "double"
          },
          "calculated_at": {
            "type": "string",
            "description": "The timestamp when the analytics were calculated.",
            "format": "date-time"
          },
          "calculation_interval_in_minutes": {
            "type": "integer",
            "description": "The interval in minutes at which the analytics are calculated.",
            "format": "int32"
          },
          "warning": {
            "type": "string",
            "description": "A warning message related to the analytics, if relevant.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerClientResponseMetrics": {
        "required": [
          "broker_client_id",
          "broker_id",
          "cpu_limit",
          "cpu_usage",
          "memory_limit",
          "memory_usage",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "description": "The timestamp when the metrics were recorded.",
            "format": "int64"
          },
          "broker_id": {
            "type": "string",
            "description": "The unique identifier of the broker.",
            "format": "uuid"
          },
          "broker_client_id": {
            "type": "string",
            "description": "The unique identifier of the broker client.",
            "format": "uuid"
          },
          "cpu_limit": {
            "type": "number",
            "description": "The CPU limit assigned to the broker client.",
            "format": "double"
          },
          "cpu_usage": {
            "type": "number",
            "description": "The current CPU usage of the broker client.",
            "format": "double"
          },
          "memory_limit": {
            "type": "integer",
            "description": "The memory limit assigned to the broker client in bytes.",
            "format": "int64"
          },
          "memory_usage": {
            "type": "integer",
            "description": "The current memory usage of the broker client in megabytes.",
            "format": "int64"
          },
          "disk_space": {
            "type": "integer",
            "description": "The available disk space for the broker client in megabytes.",
            "format": "int64",
            "nullable": true
          },
          "disk_usage": {
            "type": "number",
            "description": "The current disk usage percentage of the broker client.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerClientSettings": {
        "required": [
          "min_log_level_to_send",
          "should_auto_update_client",
          "should_send_client_logs",
          "skip_ssl_verification"
        ],
        "type": "object",
        "properties": {
          "should_send_client_logs": {
            "type": "boolean",
            "description": "Indicates whether the broker client should send logs to the server."
          },
          "should_auto_update_client": {
            "type": "boolean",
            "description": "Indicates whether the broker client should automatically update itself."
          },
          "min_log_level_to_send": {
            "$ref": "#/components/schemas/LogLevel"
          },
          "skip_ssl_verification": {
            "type": "boolean",
            "description": "Indicates whether SSL certificate verification should be skipped."
          },
          "storage_expiry_ttl_in_hours": {
            "type": "integer",
            "description": "Specifies the time-to-live for stored data in hours before expiry.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCreation": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the broker."
          },
          "client_settings": {
            "$ref": "#/components/schemas/BrokerClientSettings"
          }
        },
        "additionalProperties": false
      },
      "BrokerIntegration": {
        "required": [
          "broker_id",
          "skip_ssl_verification"
        ],
        "type": "object",
        "properties": {
          "broker_id": {
            "type": "string",
            "description": "The unique identifier of the broker.",
            "format": "uuid"
          },
          "skip_ssl_verification": {
            "type": "boolean",
            "description": "Indicates whether SSL verification should be skipped."
          }
        },
        "additionalProperties": false
      },
      "BrokerState": {
        "enum": [
          "NotInitialized",
          "Connected",
          "Disconnected"
        ],
        "type": "string"
      },
      "BrokerTokenResponse": {
        "required": [
          "broker_id",
          "client_id",
          "deployment_url",
          "docker_deploy",
          "kubernetes_deploy",
          "secret",
          "skip_ssl_verification"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string",
            "description": "The broker client ID."
          },
          "secret": {
            "type": "string",
            "description": "The client secret for the broker."
          },
          "broker_id": {
            "type": "string",
            "description": "The unique identifier of the broker.",
            "format": "uuid"
          },
          "deployment_url": {
            "type": "string",
            "description": "The URL for the broker deployment configuration."
          },
          "skip_ssl_verification": {
            "type": "boolean",
            "description": "Indicates whether SSL verification should be skipped."
          },
          "kubernetes_deploy": {
            "type": "string",
            "description": "The command to deploy the broker using Kubernetes.",
            "readOnly": true
          },
          "docker_deploy": {
            "type": "string",
            "description": "The command to deploy the broker using Docker.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LogLevel": {
        "enum": [
          "Trace",
          "Debug",
          "Information",
          "Warning",
          "Error",
          "Critical",
          "None"
        ],
        "type": "string"
      },
      "ControlEvidenceConnectionMultipleProjects": {
        "required": [
          "control_id",
          "evidence_id"
        ],
        "type": "object",
        "properties": {
          "control_id": {
            "type": "integer",
            "description": "The unique identifier of the control being connected to evidence.",
            "format": "int32"
          },
          "evidence_id": {
            "type": "integer",
            "description": "The unique identifier of the evidence being connected to the control.",
            "format": "int32"
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of project identifiers that this control-evidence connection applies to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ControlEvidenceConnectionRemovalMultipleProjects": {
        "required": [
          "control_id",
          "evidence_id"
        ],
        "type": "object",
        "properties": {
          "control_id": {
            "type": "integer",
            "description": "The unique identifier of the control being disconnected from evidence.",
            "format": "int32"
          },
          "evidence_id": {
            "type": "integer",
            "description": "The unique identifier of the evidence being disconnected from the control.",
            "format": "int32"
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of project identifiers from which this control-evidence connection will be removed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ControlExecutionStatus": {
        "enum": [
          "Passed",
          "Failed",
          "Exempted",
          "Overridden",
          "Pending"
        ],
        "type": "string"
      },
      "ControlStatusUpdate": {
        "required": [
          "control_id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "control_id": {
            "type": "integer",
            "description": "The control ID.",
            "format": "int32"
          },
          "project_id": {
            "type": "integer",
            "description": "The project ID.",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/ControlExecutionStatus"
          }
        },
        "additionalProperties": false
      },
      "CustomFrameworkCreation": {
        "required": [
          "display_name",
          "id",
          "is_custom",
          "is_enabled",
          "name",
          "practices"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the framework.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the framework."
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the framework."
          },
          "description": {
            "type": "string",
            "description": "The description of the framework.",
            "nullable": true
          },
          "external_link": {
            "type": "string",
            "description": "The external link for the framework.",
            "nullable": true
          },
          "documentation_link": {
            "type": "string",
            "description": "The documentation link for the framework.",
            "nullable": true
          },
          "is_custom": {
            "type": "boolean",
            "description": "A flag indicating whether the framework is custom."
          },
          "is_enabled": {
            "type": "boolean",
            "description": "A flag indicating whether the framework is enabled."
          },
          "practices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomPractice"
            },
            "description": "The list of practices for the framework."
          }
        },
        "additionalProperties": false
      },
      "CustomPractice": {
        "required": [
          "description",
          "name",
          "requirements"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "external_link": {
            "type": "string",
            "nullable": true
          },
          "documentation_link": {
            "type": "string",
            "nullable": true
          },
          "parent_practice": {
            "type": "string",
            "nullable": true
          },
          "requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomRequirement"
            },
            "description": "The list of requirements for the practice."
          }
        },
        "additionalProperties": false
      },
      "CustomRequirement": {
        "required": [
          "controls",
          "description",
          "display_name",
          "evidence",
          "is_self_attestation",
          "name",
          "practice",
          "practices",
          "sub_practice",
          "tldr"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tldr": {
            "type": "string"
          },
          "practice": {
            "type": "string"
          },
          "is_self_attestation": {
            "type": "boolean"
          },
          "sub_practice": {
            "type": "string"
          },
          "practices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequirementText"
            }
          },
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequirementText"
            }
          },
          "controls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeedControl"
            },
            "description": "The list of controls for the requirement."
          }
        },
        "additionalProperties": false
      },
      "EnableMultipleFrameworksRequest": {
        "required": [
          "framework_ids"
        ],
        "type": "object",
        "properties": {
          "framework_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Framework identifiers to enable."
          }
        },
        "additionalProperties": false
      },
      "EvidenceCreation": {
        "required": [
          "created_by",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the evidence."
          },
          "description": {
            "type": "string",
            "description": "The description of the evidence.",
            "nullable": true
          },
          "created_by": {
            "type": "string",
            "description": "The user who created the evidence."
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of project IDs associated with the evidence.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EvidenceLinkCreation": {
        "required": [
          "link"
        ],
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "The link to the evidence."
          }
        },
        "additionalProperties": false
      },
      "FrameworkActivation": {
        "required": [
          "framework_id",
          "is_enabled"
        ],
        "type": "object",
        "properties": {
          "framework_id": {
            "type": "integer",
            "description": "The unique identifier of the framework.",
            "format": "int32"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Indicates whether the framework is enabled."
          }
        },
        "additionalProperties": false
      },
      "IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "JsonPatchDocument_Evidence": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonPatchOperation_Evidence"
            },
            "nullable": true,
            "readOnly": true
          },
          "contract_resolver": {
            "$ref": "#/components/schemas/IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "JsonPatchOperation_Evidence": {
        "required": [
          "operation_type"
        ],
        "type": "object",
        "properties": {
          "operation_type": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "type": "string"
      },
      "RequirementStatus": {
        "enum": [
          "Pending",
          "Compliant",
          "Failed"
        ],
        "type": "string"
      },
      "RequirementText": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SeedControl": {
        "required": [
          "always_pass",
          "is_manual",
          "name",
          "practice",
          "requirement"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "control_id": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "practice": {
            "type": "string"
          },
          "requirement": {
            "type": "string"
          },
          "is_manual": {
            "type": "boolean"
          },
          "always_pass": {
            "type": "boolean"
          },
          "system_detection_rule_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "graph_query_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "sub_category": {
            "type": "string",
            "nullable": true
          },
          "severities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "risk_score_severities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContainerImageRepositoryCodeRepositoryConnection": {
        "required": [
          "container_image_repository_id",
          "is_manual"
        ],
        "type": "object",
        "properties": {
          "container_image_repository_id": {
            "type": "string",
            "description": "The unique identifier for the container image repository."
          },
          "repository_id": {
            "type": "string",
            "description": "The identifier of the associated code repository, if applicable.",
            "nullable": true
          },
          "is_manual": {
            "type": "boolean",
            "description": "Indicates if manual correlation is enabled for this container image repository. Defaults to false."
          },
          "discovered_by": {
            "type": "string",
            "description": "Describes how the link between container image repository and code repository was discovered (e.g., 'Build logs', 'Dockerfile heuristics', 'Manual').",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContainerImageRepositoryToCodeRepositoryUpsert": {
        "required": [
          "container_image_repository_id",
          "is_manual"
        ],
        "type": "object",
        "properties": {
          "container_image_repository_id": {
            "type": "string",
            "description": "The unique identifier for the container image repository."
          },
          "repository_id": {
            "type": "string",
            "description": "The identifier of the associated code repository, if applicable.",
            "nullable": true
          },
          "is_manual": {
            "type": "boolean",
            "description": "Indicates if manual correlation is enabled for this container image repository. Defaults to false."
          },
          "discovered_by": {
            "type": "string",
            "description": "Describes how the link between container image repository and code repository was discovered (e.g., 'Build logs', 'Dockerfile heuristics', 'Manual').",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImportSbomBulkDeleteRequest": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "maxItems": 50,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of ids of import SBOM report for deleting. (Limit to 50 ids)"
          }
        },
        "additionalProperties": false
      },
      "ImportSbomBulkDeleteResponse": {
        "required": [
          "deleted_ids"
        ],
        "type": "object",
        "properties": {
          "deleted_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Deleted ids of imported SBOM report."
          }
        },
        "additionalProperties": false
      },
      "ReplaceImportedSbomResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The new id of imported SBOM report."
          }
        },
        "additionalProperties": false
      },
      "PreSignedPost": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL to post to"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Dictionary of form fields and values to submit with the POST",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GitlabVulnerabilityReportType": {
        "enum": [
          "SAST",
          "DEPENDENCY_SCANNING",
          "CONTAINER_SCANNING",
          "DAST",
          "SECRET_DETECTION",
          "COVERAGE_FUZZING",
          "API_FUZZING",
          "CLUSTER_IMAGE_SCANNING",
          "GENERIC"
        ],
        "type": "string"
      },
      "VulnerabilityReportSyncRequest": {
        "required": [
          "violation_categories"
        ],
        "type": "object",
        "properties": {
          "violation_categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitlabVulnerabilityReportType"
            },
            "description": "The vulnerability report type categories to be synced from Gitlab."
          }
        },
        "additionalProperties": false
      },
      "K8SRunnerInstallation": {
        "required": [
          "integration_type",
          "is_auto_update_enabled",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the Kubernetes runner installation.",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the Kubernetes runner installation.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the installed Kubernetes runner.",
            "nullable": true
          },
          "last_heartbeat": {
            "type": "string",
            "description": "The timestamp of the last heartbeat received from the Kubernetes runner. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The timestamp when the Kubernetes runner installation was created. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/RunnerStatus"
          },
          "is_auto_update_enabled": {
            "type": "boolean",
            "description": "Indicates whether automatic updates are enabled for the Kubernetes runner. Defaults to `true`."
          },
          "message": {
            "type": "string",
            "description": "A message providing additional details about the runner's status or any recent events.",
            "nullable": true
          },
          "integration_type": {
            "type": "string",
            "description": "The type of integration, which is 'Kubernetes' for this runner."
          }
        },
        "additionalProperties": false
      },
      "KubernetesApiTokenResponse": {
        "required": [
          "client_id",
          "deployment_url",
          "installation_id",
          "is_auto_update_enabled",
          "kubectl_deploy",
          "secret"
        ],
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "installation_id": {
            "type": "integer",
            "format": "int32"
          },
          "deployment_url": {
            "type": "string"
          },
          "is_auto_update_enabled": {
            "type": "boolean"
          },
          "kubectl_deploy": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RunnerStatus": {
        "enum": [
          "Running",
          "Stopped",
          "Waiting",
          "Error"
        ],
        "type": "string"
      },
      "EntityTypes": {
        "enum": [
          "Audit",
          "Branch",
          "BranchProtections",
          "Commit",
          "Issue",
          "Member",
          "MemberPublicRepository",
          "MemberRepositoryPermission",
          "Organization",
          "OrganizationMember",
          "PullRequest",
          "PullRequestReview",
          "Repository",
          "Team",
          "TeamMember",
          "TeamRepositoryPermission",
          "User",
          "Webhook",
          "Clone",
          "ThirdPartyApp",
          "PullRequestCommitStatus",
          "OrganizationPipelinesSettings",
          "ProjectPipelineSettings",
          "File",
          "Workflow",
          "WorkflowRun",
          "WorkflowJob",
          "Module",
          "WorkflowSecret",
          "ContainerImage",
          "ContainerImageVersion",
          "ContainerImageRegistry",
          "ContainerImageTag",
          "Clusterrole",
          "Clusterrolebinding",
          "Configmap",
          "Cronjob",
          "Daemonset",
          "Deployment",
          "Endpoints",
          "Horizontalpodautoscaler",
          "Ingress",
          "Job",
          "Limitrange",
          "Namespace",
          "Networkpolicy",
          "Pod",
          "Poddisruptionbudget",
          "Podsecuritypolicy",
          "Replicaset",
          "Replicationcontroller",
          "Resourcequota",
          "Role",
          "Rolebinding",
          "Service",
          "Serviceaccount",
          "Statefulset",
          "CloudResource",
          "DbCluster",
          "DbInstance",
          "Ec2Image",
          "Ec2Instance",
          "Ec2Volume",
          "S3Bucket",
          "CloudTrail",
          "IamUser",
          "Config",
          "KmsKey",
          "Tag",
          "CloudSql",
          "MemberLabel",
          "TeamLabel",
          "RepositoryLabel",
          "OrganizationLabel",
          "RepositoryProject",
          "PackageVersion",
          "PackageVulnerability",
          "JenkinsPlugin",
          "JenkinsInstance",
          "JenkinsInstallation",
          "JenkinsVulnerability",
          "AwsCloudformationStack",
          "AwsIamAccountPasswordPolicy",
          "AwsKmsKey",
          "AwsApiGatewayMethod",
          "AwsS3Bucket",
          "AwsSqsQueue",
          "AwsLaunchConfiguration",
          "AwsCloudtrail",
          "AwsS3BucketPublicAccessBlock",
          "AwsEbsEncryptionByDefault",
          "AwsEcrRepositoryPolicy",
          "AwsRedshiftCluster",
          "AwsCloudfrontDistribution",
          "AwsInstance",
          "AwsSnsTopic",
          "AwsIamUserPolicy",
          "AwsS3BucketPolicy",
          "AwsApiGatewayRestApi",
          "AwsMqBroker",
          "AwsIamPolicyAttachment",
          "AwsDbSecurityGroup",
          "AwsMskCluster",
          "AwsEcsTaskDefinition",
          "AwsEksCluster",
          "AwsDefaultSecurityGroup",
          "AwsApiGatewayStage",
          "AwsIamAccessKey",
          "AwsAmiLaunchPermission",
          "AwsIamRolePolicy",
          "AwsIamGroupPolicy",
          "AwsSecurityGroup",
          "AwsLambdaFunction",
          "AwsEcsService",
          "AwsRoute53Zone",
          "AwsRoute53QueryLog",
          "AwsElasticsearchDomain",
          "AwsApigatewayv2Stage",
          "AwsEfsFileSystem",
          "AwsDbInstance",
          "AwsSqsQueuePolicy",
          "AwsEbsVolume",
          "AwsVpc",
          "AwsFlowLog",
          "AwsDefaultVpc",
          "AwsSecurityGroupRule",
          "AwsNeptuneCluster",
          "AwsOrganizationsPolicy",
          "AwsKinesisStream",
          "AwsBatchJobDefinition",
          "AwsIamPolicy",
          "AwsApiGatewayDeployment",
          "AwsLoadBalancerPolicy",
          "AwsIamUserLoginProfile",
          "AwsConfigConfigurationAggregator",
          "AwsAmi",
          "AwsApiGatewayMethodSettings",
          "AwsKinesisFirehoseDeliveryStream",
          "AwsElasticacheCluster",
          "AwsCloudwatchLogGroup",
          "AwsRoute53Record",
          "AwsLambdaPermission",
          "AwsCognitoUserPool",
          "AwsEcrRepository",
          "AwsIamRole",
          "AwsAutoscalingGroup",
          "AwsAlb",
          "AwsLb",
          "AwsAlbListener",
          "AwsLbListener",
          "AwsSnsTopicPolicy",
          "AwsApiGatewayDomainName",
          "AwsIamServerCertificate",
          "AwsAcmCertificate",
          "AwsCloudformationStackSetInstance",
          "AwsEbsSnapshot",
          "AwsRdsCluster",
          "AwsGuarddutyDetector",
          "AwsIamUser",
          "AwsConfigConfigurationRecorder",
          "AwsNetworkInterface",
          "AwsEc2CapacityReservation",
          "AwsElb",
          "AwsVpcIpv4CidrBlockAssociation",
          "AwsLbTargetGroup",
          "AwsSubnet",
          "AwsConfigDeliveryChannel",
          "AzurermRedisCache",
          "AzurermRedisFirewallRule",
          "AzurermKeyVault",
          "AzurermMonitorDiagnosticSetting",
          "AzurermStorageAccountNetworkRules",
          "AzurermStorageAccount",
          "AzurermPostgresqlConfiguration",
          "AzurermContainerRegistry",
          "AzurermManagementLock",
          "AzurermSecurityCenterSubscriptionPricing",
          "AzurermKeyVaultKey",
          "AzurermNetworkSecurityRule",
          "AzurermSecurityCenterContact",
          "AzurermStorageContainer",
          "AzurermKubernetesCluster",
          "AzurermMssqlServer",
          "AzurermManagedDisk",
          "AzurermAppService",
          "AzurermMysqlServer",
          "AzurermMssqlDatabase",
          "AzurermNetworkSecurityGroup",
          "AzurermSqlServer",
          "AzurermNetworkWatcherFlowLog",
          "AzurermApplicationGateway",
          "AzurermSqlDatabase",
          "AzurermPostgresqlServer",
          "AzurermSqlFirewallRule",
          "AzurermKeyVaultSecret",
          "AzurermSqlActiveDirectoryAdministrator",
          "AzurermLinuxVirtualMachine",
          "AzurermVirtualMachine",
          "AzurermStorageBlob",
          "AzurermNetworkInterface",
          "AzurermResourceGroup",
          "AzurermLb",
          "AzurermDnsZone",
          "AzurermPublicIp",
          "AzurermCosmosdbAccount",
          "AzurermVirtualNetwork",
          "AzurermSubnet",
          "GoogleComputeInstance",
          "GoogleComputeProjectMetadata",
          "GoogleComputeProjectMetadataItem",
          "GoogleContainerCluster",
          "GoogleStorageBucketIamBinding",
          "GoogleProjectIamMember",
          "GoogleComputeSubnetwork",
          "GoogleComputeSslPolicy",
          "GoogleBigqueryDataset",
          "GoogleProjectIamBinding",
          "GoogleComputeDisk",
          "GoogleKmsCryptoKey",
          "GoogleProject",
          "GoogleStorageBucket",
          "GoogleStorageBucketIamPolicy",
          "GoogleContainerNodePool",
          "GoogleComputeFirewall",
          "GoogleSqlDatabaseInstance",
          "GoogleProjectIamAuditConfig",
          "GoogleDnsManagedZone",
          "GoogleStorageBucketIamMember",
          "GoogleServiceUsage",
          "ArmResource",
          "ArmMicrosoftDbForPostgreSqlFlexibleServers",
          "Dockerfile",
          "GithubActionWorkflowFile",
          "GithubActionWorkflowJob",
          "GithubActionWorkflowStep",
          "GithubActionWorkflowService",
          "SlackMessage",
          "SlackSharedFile",
          "ContainerImageDependency",
          "BranchProtectionConfiguration",
          "MergeRequestApprovalSettings",
          "MergeRequestApprovalRule",
          "ConfluencePageContent",
          "JiraIssue",
          "JiraComment",
          "ChatMessage",
          "ChatFile",
          "Integration",
          "EnterpriseInstanceDetails",
          "DriveItem",
          "ConfluenceAttachmentContent",
          "ConfluenceBlogContent",
          "ConfluenceCommentContent",
          "Page",
          "Blog",
          "Comment",
          "Attachment",
          "JiraAttachment",
          "ContainerImageVersionVulnerability",
          "GithubRepositoryActionsSettings",
          "AwsIamServiceAccount",
          "AwsManagedPolicy",
          "AwsDbCluster",
          "AwsEc2Image",
          "AwsEc2Instance",
          "AwsEc2Volume",
          "AwsConfig",
          "AwsTag",
          "AwsEc2SecurityGroupRule",
          "AwsEc2TargetGroup",
          "GcpCloudSql",
          "GcpComputeInstance",
          "GcpComputeProjectMetadata",
          "GcpComputeProjectMetadataItem",
          "GcpContainerCluster",
          "GcpStorageBucketIamBinding",
          "GcpProjectIamMember",
          "GcpComputeSubnetwork",
          "GcpComputeSslPolicy",
          "GcpBigqueryDataset",
          "GcpProjectIamBinding",
          "GcpComputeDisk",
          "GcpKmsCryptoKey",
          "GcpProject",
          "GcpStorageBucket",
          "GcpStorageBucketIamPolicy",
          "GcpContainerNodePool",
          "GcpComputeFirewall",
          "GcpSqlDatabaseInstance",
          "GcpProjectIamAuditConfig",
          "GcpDnsManagedZone",
          "GcpStorageBucketIamMember",
          "GcpServiceUscp",
          "AzureRedisCache",
          "AzureRedisFirewallRule",
          "AzureKeyVault",
          "AzureMonitorDiagnosticSetting",
          "AzureStorageAccountNetworkRules",
          "AzureStorageAccount",
          "AzurePostgresqlConfiguration",
          "AzureContainerRegistry",
          "AzureManagementLock",
          "AzureSecurityCenterSubscriptionPricing",
          "AzureKeyVaultKey",
          "AzureNetworkSecurityRule",
          "AzureSecurityCenterContact",
          "AzureStorageContainer",
          "AzureKubernetesCluster",
          "AzureMssqlServer",
          "AzureManagedDisk",
          "AzureAppService",
          "AzureMysqlServer",
          "AzureMssqlDatabase",
          "AzureNetworkSecurityGroup",
          "AzureSqlServer",
          "AzureNetworkWatcherFlowLog",
          "AzureApplicationGateway",
          "AzureSqlDatabase",
          "AzurePostgresqlServer",
          "AzureSqlFirewallRule",
          "AzureKeyVaultSecret",
          "AzureSqlActiveDirectoryAdministrator",
          "AzureLinuxVirtualMachine",
          "AzureVirtualMachine",
          "AzureStorageBlob",
          "AzureNetworkInterface",
          "AzureResourceGroup",
          "AzureLb",
          "AzureDnsZone",
          "AzurePublicIp",
          "AzureCosmosdbAccount",
          "AzureVirtualNetwork",
          "AzureSubnet",
          "Project",
          "Instance"
        ],
        "type": "string"
      },
      "Label": {
        "required": [
          "id",
          "name",
          "source"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The unique name of the label."
          },
          "color": {
            "type": "string",
            "description": "The color associated with the label.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the label. Defaults to 'Custom'."
          }
        },
        "additionalProperties": false
      },
      "LabelConnection": {
        "required": [
          "label_name",
          "resources"
        ],
        "type": "object",
        "properties": {
          "label_name": {
            "type": "string",
            "description": "The name of the label to be connected to the resources."
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceLabelConnection"
            },
            "description": "The list of resources to be connected to the specified label."
          }
        },
        "additionalProperties": false
      },
      "LabelRequest": {
        "required": [
          "name",
          "source"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of the label."
          },
          "color": {
            "type": "string",
            "description": "The color associated with the label.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the label. Defaults to 'Custom'."
          }
        }
      },
      "LabelResource": {
        "required": [
          "resource_id",
          "resource_type"
        ],
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "The unique identifier of the resource."
          },
          "resource_type": {
            "type": "string",
            "description": "The type of the resource."
          }
        },
        "additionalProperties": false
      },
      "ListLabelResourcesResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelResource"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListLabelsResponse": {
        "required": [
          "items",
          "page_size"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "description": "The list of items for the current page."
          },
          "page_size": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The number of items per page.",
            "format": "int32"
          },
          "next_page_token": {
            "type": "string",
            "description": "A token for retrieving the next page of items, if available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Resource": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ResourceLabelConnection": {
        "required": [
          "id",
          "resource_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the resource."
          },
          "resource_type": {
            "$ref": "#/components/schemas/EntityTypes"
          }
        },
        "additionalProperties": false
      },
      "EntityType": {
        "enum": [
          "Sbom"
        ],
        "type": "string"
      },
      "GraphQuery": {
        "type": "object",
        "properties": {
          "query_continuation_token": {
            "type": "boolean",
            "readOnly": true
          },
          "is_next_continuation_token": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a graph query entity that can be copied directly from the knowledge graph."
      },
      "GraphQueryEntity": {
        "type": "object",
        "properties": {
          "query": {
            "$ref": "#/components/schemas/GraphQuery"
          },
          "output_fields": {
            "type": "object",
            "additionalProperties": {},
            "description": "A dictionary specifying the fields to be included or how they should be displayed in the query output.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for the report configuration.",
            "format": "int32"
          },
          "report_suite_id": {
            "type": "integer",
            "description": "The identifier of the report suite to which this configuration belongs.",
            "format": "int32"
          },
          "query_id": {
            "type": "integer",
            "description": "The identifier of the specific query associated with this report configuration, if applicable.",
            "format": "int32",
            "nullable": true
          },
          "graph_query_entity": {
            "$ref": "#/components/schemas/GraphQueryEntity"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "description": "A dictionary of parameters used for the report configuration.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportConfigurationsCreationRequest": {
        "type": "object",
        "properties": {
          "query_id": {
            "type": "integer",
            "description": "The identifier of a pre-defined query to be executed. Use this or `GraphQueryEntity`, but not both.",
            "format": "int32",
            "nullable": true
          },
          "graph_query_entity": {
            "$ref": "#/components/schemas/GraphQueryEntity"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "description": "A dictionary of parameters to be passed to the query.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportExecution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for this individual report execution instance.",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The date and time when this report execution record was created. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The date and time when this report execution record was last modified. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time"
          },
          "report_configuration_id": {
            "type": "integer",
            "description": "The identifier of the specific report configuration used for this execution.",
            "format": "int32",
            "nullable": true
          },
          "report_executions_suite_id": {
            "type": "integer",
            "description": "The identifier of the parent report execution to which this individual execution belongs.",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ReportStatus"
          },
          "report_link": {
            "type": "string",
            "description": "A direct link or URI to access the generated report artifact, if available.",
            "nullable": true
          },
          "query_id": {
            "type": "integer",
            "description": "The identifier of the query that was executed for this report.",
            "format": "int32",
            "nullable": true
          },
          "query_entity": {
            "$ref": "#/components/schemas/GraphQueryEntity"
          },
          "output_format": {
            "$ref": "#/components/schemas/ReportOutputFormat"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "description": "A dictionary of parameters that were used for this specific report execution.",
            "nullable": true
          },
          "storage_details": {
            "$ref": "#/components/schemas/StorageDetails"
          },
          "error_message": {
            "type": "string",
            "description": "Contains error details if the report execution failed.",
            "nullable": true
          },
          "status_message": {
            "type": "string",
            "description": "A message providing additional details about the current status of the report execution.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportExecutionsSuite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier for this report execution instance.",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The date and time when this report execution instance was created. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The date and time when this report execution instance was last modified. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time"
          },
          "report_suite_id": {
            "type": "integer",
            "description": "The identifier of the report to which this execution belongs.",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ReportQueryType"
          },
          "executed_by": {
            "type": "string",
            "description": "The identifier of the user or system that initiated this execution.",
            "nullable": true
          },
          "time_period": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "workflow_id": {
            "type": "integer",
            "description": "The identifier of the workflow associated with this execution, if any.",
            "format": "int32",
            "nullable": true
          },
          "is_standalone_report_execution": {
            "type": "boolean",
            "description": "Indicates if this execution is for a standalone report. Defaults to `false`."
          },
          "source_type": {
            "$ref": "#/components/schemas/SourceType"
          },
          "status": {
            "$ref": "#/components/schemas/ReportStatus"
          },
          "storage_details": {
            "$ref": "#/components/schemas/StorageDetails"
          },
          "delta_data_mode": {
            "type": "boolean",
            "description": "Indicates if this specific execution ran in delta data mode.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportOutputFormat": {
        "enum": [
          "Csv",
          "Json",
          "Spdx",
          "Cyclonedx",
          "Pdf"
        ],
        "type": "string"
      },
      "ReportQueryType": {
        "enum": [
          "GraphQuery",
          "Sbom",
          "Html",
          "Vex"
        ],
        "type": "string"
      },
      "ReportStatus": {
        "enum": [
          "Pending",
          "Running",
          "Completed",
          "Failed"
        ],
        "type": "string"
      },
      "ReportStatusUpdate": {
        "type": "object",
        "properties": {
          "report_type": {
            "type": "string",
            "description": "Indicates the type of report that was processed or generated."
          },
          "report_command_type": {
            "type": "string",
            "description": "Specifies the type of command or operation performed related to the report."
          },
          "request_report_parameters": {
            "type": "object",
            "additionalProperties": {},
            "description": "A dictionary of parameters that were included in the report request.",
            "nullable": true
          },
          "operation_system": {
            "type": "string",
            "description": "The operating system or environment where the report operation was handled."
          },
          "error_message": {
            "type": "string",
            "description": "Contains error details if the report execution failed.",
            "nullable": true
          },
          "execution_time": {
            "type": "integer",
            "description": "The total time (in milliseconds) taken for the report operation to complete.",
            "format": "int64"
          },
          "request_zip_file_size": {
            "type": "integer",
            "description": "The size of the request's associated ZIP file in bytes, if applicable to the operation.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportSuite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the report.",
            "format": "int32"
          },
          "created": {
            "type": "string",
            "description": "The date and time when the report was created. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "description": "The date and time when the report was last modified. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time"
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "An optional list of project IDs associated with this report.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the report."
          },
          "description": {
            "type": "string",
            "description": "An optional description for the report.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ReportQueryType"
          },
          "query_id": {
            "type": "integer",
            "description": "The identifier of the primary query associated with this report.",
            "format": "int32"
          },
          "workflow_id": {
            "type": "integer",
            "description": "The optional identifier of the workflow associated with this report.",
            "format": "int32",
            "nullable": true
          },
          "time_period": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "created_by": {
            "type": "string",
            "description": "The identifier of the user who created the report."
          },
          "output_format": {
            "$ref": "#/components/schemas/ReportOutputFormat"
          },
          "report_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportConfiguration"
            },
            "description": "A list of report configurations."
          },
          "source_type": {
            "$ref": "#/components/schemas/SourceType"
          },
          "trigger_source": {
            "$ref": "#/components/schemas/TriggerSource"
          },
          "delta_data_mode": {
            "type": "boolean",
            "description": "Indicates if the report runs in delta data mode, processing only new or changed data.",
            "nullable": true
          },
          "last_report_execution_suite": {
            "$ref": "#/components/schemas/ReportExecutionsSuite"
          }
        },
        "additionalProperties": false
      },
      "ReportSuiteCreationRequest": {
        "required": [
          "name",
          "report_configurations"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the report."
          },
          "description": {
            "type": "string",
            "description": "An optional description for the report.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ReportQueryType"
          },
          "output_format": {
            "$ref": "#/components/schemas/ReportOutputFormat"
          },
          "time_period": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "report_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportConfigurationsCreationRequest"
            },
            "description": "A list of configuration for this report."
          },
          "workflow_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowAction"
            },
            "description": "An optional list of workflow actions to be triggered after report generation.",
            "nullable": true
          },
          "delta_data_mode": {
            "type": "boolean",
            "description": "Specifies if the report processes only new or changed data (delta data mode).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportSuiteUpdateRequest": {
        "type": "object",
        "properties": {
          "report_suite_id": {
            "type": "integer",
            "description": "The unique identifier of the report to be updated.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The new name for the report. Provide if you want to update the current name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The new optional description for the report.",
            "nullable": true
          },
          "time_period": {
            "$ref": "#/components/schemas/TimePeriod"
          },
          "delta_data_mode": {
            "type": "boolean",
            "description": "The new value indicating if the report should run in delta data mode.",
            "nullable": true
          },
          "output_format": {
            "$ref": "#/components/schemas/ReportOutputFormat"
          },
          "workflow_id": {
            "type": "integer",
            "description": "The new optional identifier of the workflow to be associated with this report.",
            "format": "int32",
            "nullable": true
          },
          "workflow_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowAction"
            },
            "description": "The new optional list of workflow actions to be triggered after report generation.",
            "nullable": true
          },
          "report_configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportConfiguration"
            },
            "description": "The new list of configurations within this report.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceType": {
        "enum": [
          "Graph",
          "ZippedFile"
        ],
        "type": "string"
      },
      "StandaloneReportExecutionRequest": {
        "type": "object",
        "properties": {
          "graph_query_entity": {
            "$ref": "#/components/schemas/GraphQueryEntity"
          },
          "output_format": {
            "$ref": "#/components/schemas/ReportOutputFormat"
          },
          "type": {
            "$ref": "#/components/schemas/ReportQueryType"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "description": "An optional dictionary of parameters to be passed to the query for the standalone report.",
            "nullable": true
          },
          "source_type": {
            "$ref": "#/components/schemas/SourceType"
          }
        },
        "additionalProperties": false
      },
      "StorageDetails": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "folder": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "is_external": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TimePeriod": {
        "enum": [
          "Weekly",
          "Monthly",
          "Daily"
        ],
        "type": "string"
      },
      "TriggerSource": {
        "enum": [
          "Ui",
          "Cli"
        ],
        "type": "string"
      },
      "WorkflowAction": {
        "required": [
          "id",
          "is_enabled",
          "remediation_action",
          "workflow_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the workflow action",
            "format": "int32"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Whether the workflow action is enabled"
          },
          "workflow_id": {
            "type": "integer",
            "description": "ID of the workflow this action belongs to",
            "format": "int32"
          },
          "remediation_action": {
            "type": "string",
            "description": "Type of remediation action to execute"
          },
          "integration_id": {
            "type": "string",
            "description": "ID of the integration to use for the action",
            "nullable": true
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "description": "Configuration parameters for the action",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Status or error message",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnedResourceType": {
        "enum": [
          "Repository"
        ],
        "type": "string"
      },
      "Owner": {
        "required": [
          "email",
          "owner_id",
          "owner_name",
          "username"
        ],
        "type": "object",
        "properties": {
          "owner_id": {
            "type": "string",
            "description": "The unique identifier for the owner."
          },
          "owner_name": {
            "type": "string",
            "description": "The display name of the owner."
          },
          "username": {
            "type": "string",
            "description": "The username associated with the owner."
          },
          "email": {
            "type": "string",
            "description": "The email address of the owner."
          }
        },
        "additionalProperties": false
      },
      "OwnerCreation": {
        "required": [
          "member_id"
        ],
        "type": "object",
        "properties": {
          "member_id": {
            "type": "string",
            "description": "The unique identifier of the member to be designated as the owner."
          }
        },
        "additionalProperties": false
      },
      "ResourceOwner": {
        "required": [
          "owner_id",
          "resource_id",
          "resource_type",
          "root_id"
        ],
        "type": "object",
        "properties": {
          "resource_type": {
            "$ref": "#/components/schemas/OwnedResourceType"
          },
          "root_id": {
            "type": "string",
            "description": "The root identifier associated with the resource."
          },
          "resource_id": {
            "type": "string",
            "description": "The unique identifier of the resource."
          },
          "owner_id": {
            "type": "string",
            "description": "The unique identifier of the owner associated with the resource."
          },
          "ownership_reason": {
            "type": "string",
            "description": "The reason or justification for this ownership assignment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceOwnerToggle": {
        "required": [
          "is_enabled",
          "owner_id",
          "resource_id",
          "resource_type",
          "root_id"
        ],
        "type": "object",
        "properties": {
          "resource_type": {
            "$ref": "#/components/schemas/OwnedResourceType"
          },
          "root_id": {
            "type": "string",
            "description": "The root identifier associated with the resource."
          },
          "resource_id": {
            "type": "string",
            "description": "The unique identifier of the resource."
          },
          "owner_id": {
            "type": "string",
            "description": "The unique identifier of the owner associated with the resource."
          },
          "ownership_reason": {
            "type": "string",
            "description": "The reason or justification for this ownership assignment.",
            "nullable": true
          },
          "is_enabled": {
            "type": "boolean",
            "description": "The desired state for the resource owner relationship (true for enabled, false for disabled)."
          }
        },
        "additionalProperties": false
      },
      "ResourceOwnership": {
        "required": [
          "calculated_at",
          "email",
          "is_enabled",
          "is_manual",
          "owner_id",
          "owner_name",
          "ownership_reason",
          "username"
        ],
        "type": "object",
        "properties": {
          "owner_id": {
            "type": "string",
            "description": "The unique identifier for the owner."
          },
          "owner_name": {
            "type": "string",
            "description": "The display name of the owner."
          },
          "username": {
            "type": "string",
            "description": "The username associated with the owner."
          },
          "email": {
            "type": "string",
            "description": "The email address of the owner."
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Indicates whether the owner is currently enabled. Defaults to `false`."
          },
          "is_manual": {
            "type": "boolean",
            "description": "Indicates whether the ownership assignment was made manually. Defaults to `false`."
          },
          "ownership_reason": {
            "type": "string",
            "description": "The reason or justification for this ownership assignment."
          },
          "calculated_at": {
            "type": "string",
            "description": "The timestamp indicating when this ownership data was calculated. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CliClient": {
        "enum": [
          "NotCli",
          "Cli",
          "VsCode",
          "JetBrains",
          "VisualStudio",
          "Theia"
        ],
        "type": "string"
      },
      "CliScanCountByVersionNumberBreakdown": {
        "required": [
          "aggregated_versions",
          "scan_count",
          "version_number"
        ],
        "type": "object",
        "properties": {
          "version_number": {
            "type": "string",
            "description": "The primary version number."
          },
          "scan_count": {
            "type": "integer",
            "description": "The total number of scans performed using this version.",
            "format": "int32"
          },
          "aggregated_versions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of specific version strings that are aggregated under this version number."
          }
        },
        "additionalProperties": false
      },
      "CliScansCount": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The total number of CLI scans performed within the specified filter criteria.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CliViolationsOverTime": {
        "required": [
          "month",
          "scan_type",
          "violations_count",
          "year"
        ],
        "type": "object",
        "properties": {
          "month": {
            "type": "integer",
            "description": "The month for this violations data point.",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "description": "The year for this violations data point.",
            "format": "int32"
          },
          "scan_type": {
            "$ref": "#/components/schemas/ScanType"
          },
          "violations_count": {
            "type": "integer",
            "description": "The number of violations found for this time period and scan type.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DetectionSeverity": {
        "enum": [
          "Low",
          "Medium",
          "High",
          "Critical",
          "NotAvailable",
          "Info"
        ],
        "type": "string"
      },
      "HistoricalViolations": {
        "required": [
          "date",
          "ignored_violations",
          "open_violations",
          "resolved_violations"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date for this historical data point."
          },
          "open_violations": {
            "type": "integer",
            "description": "The number of violations that were open by pull request scans on this date.",
            "format": "int32"
          },
          "resolved_violations": {
            "type": "integer",
            "description": "The number of violations that were resolved by pull request scans on this date.",
            "format": "int32"
          },
          "ignored_violations": {
            "type": "integer",
            "description": "The number of violations that were ignored by pull request scans on this date.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "HistoricalViolationsMttr": {
        "required": [
          "date",
          "mean_time_to_remediate",
          "remediations_count",
          "severity"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date for this historical MTTR data point."
          },
          "severity": {
            "$ref": "#/components/schemas/DetectionSeverity"
          },
          "scan_type": {
            "$ref": "#/components/schemas/ScanType"
          },
          "mean_time_to_remediate": {
            "type": "integer",
            "description": "The mean time to remediate violations in milliseconds for this date, severity, and scan type.",
            "format": "int64"
          },
          "remediations_count": {
            "type": "integer",
            "description": "The number of remediations that occurred on this date for this severity and scan type.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PluginAdoption": {
        "required": [
          "date",
          "users_count"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date for this plugin adoption data point."
          },
          "users_count": {
            "type": "integer",
            "description": "The number of users who adopted the plugin on this date.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PluginAdoptionByIde": {
        "required": [
          "cli_client",
          "scans_count",
          "users_count"
        ],
        "type": "object",
        "properties": {
          "cli_client": {
            "$ref": "#/components/schemas/CliClient"
          },
          "scans_count": {
            "type": "integer",
            "description": "The number of scans performed using this CLI client.",
            "format": "int32"
          },
          "users_count": {
            "type": "integer",
            "description": "The number of unique users using this CLI client.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PullRequestCount": {
        "required": [
          "blocked_pull_requests",
          "pull_requests_with_ignored_violations",
          "pull_requests_with_open_violations",
          "pull_requests_with_resolved_violations",
          "total_pull_requests"
        ],
        "type": "object",
        "properties": {
          "pull_requests_with_open_violations": {
            "type": "integer",
            "description": "The number of pull requests that currently have open violations.",
            "format": "int32"
          },
          "pull_requests_with_resolved_violations": {
            "type": "integer",
            "description": "The number of pull requests that have resolved violations.",
            "format": "int32"
          },
          "pull_requests_with_ignored_violations": {
            "type": "integer",
            "description": "The number of pull requests that have ignored violations.",
            "format": "int32"
          },
          "blocked_pull_requests": {
            "type": "integer",
            "description": "The number of pull requests that are blocked due to policy violations.",
            "format": "int32"
          },
          "total_pull_requests": {
            "type": "integer",
            "description": "The total number of pull requests scanned within the specified filter criteria.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PullRequestsCount": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of pull requests satisfying the filter criteria.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ScanByTypeBreakdown": {
        "required": [
          "scan_type",
          "scans_count"
        ],
        "type": "object",
        "properties": {
          "scan_type": {
            "$ref": "#/components/schemas/ScanType"
          },
          "scans_count": {
            "type": "integer",
            "description": "The number of scans performed for this scan type.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ScanStatus": {
        "enum": [
          "Pending",
          "Running",
          "Completed",
          "Error"
        ],
        "type": "string"
      },
      "ScanType": {
        "enum": [
          "Secrets",
          "InfraConfiguration",
          "CiCdConfiguration",
          "SAST",
          "SCA",
          "Vulnerabilities",
          "Licenses",
          "Insights",
          "ChangeImpactAnalysis"
        ],
        "type": "string"
      },
      "Scope": {
        "required": [
          "scope_id",
          "scope_type"
        ],
        "type": "object",
        "properties": {
          "scope_type": {
            "$ref": "#/components/schemas/ScopeType"
          },
          "scope_id": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ScopeType": {
        "enum": [
          "Admin",
          "Project"
        ],
        "type": "string"
      },
      "ScopedOnboardingAsset": {
        "required": [
          "asset_id",
          "is_enabled",
          "should_scm_block_pull_request"
        ],
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string",
            "description": "The ID of the scoped asset."
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Indicates whether this asset is currently enabled."
          },
          "should_scm_block_pull_request": {
            "type": "boolean",
            "description": "Indicates whether pull requests should be blocked in the SCM for this asset."
          }
        },
        "additionalProperties": false
      },
      "ScopedPullRequestSettings": {
        "required": [
          "scan_type_settings",
          "scope_id",
          "scope_type"
        ],
        "type": "object",
        "properties": {
          "scope_id": {
            "type": "string",
            "description": "Unique identifier for the scope scan settings entity."
          },
          "scope_type": {
            "$ref": "#/components/schemas/ScopeType"
          },
          "scan_type_settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopedScanTypeSettings"
            },
            "description": "List of scan type-specific settings that define how each scan type is configured for this scope."
          }
        },
        "additionalProperties": false
      },
      "ScopedScanTypeSettings": {
        "required": [
          "is_enabled",
          "require_reason_for_violation_ignoral",
          "scan_type",
          "selected_scope_type",
          "should_scm_block_pull_request",
          "should_skip_scans_for_draft_pull_request"
        ],
        "type": "object",
        "properties": {
          "scan_configuration_id": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "scan_type": {
            "$ref": "#/components/schemas/ScanType"
          },
          "selected_scope_type": {
            "$ref": "#/components/schemas/ScopeType"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Indicates whether this scan type setting is currently enabled."
          },
          "should_scm_block_pull_request": {
            "type": "boolean",
            "description": "Indicates whether pull requests should be blocked in the SCM when this scan setting is active."
          },
          "status_check_minimum_severity": {
            "$ref": "#/components/schemas/DetectionSeverity"
          },
          "pull_request_comment_minimum_severity": {
            "$ref": "#/components/schemas/DetectionSeverity"
          },
          "should_skip_scans_for_draft_pull_request": {
            "type": "boolean",
            "description": "Indicates whether scans should be skipped for draft pull requests for this scan type."
          },
          "require_reason_for_violation_ignoral": {
            "type": "boolean",
            "description": "Indicates whether a user must provide a reason when ignoring a violation for this scan type."
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopedOnboardingAsset"
            },
            "description": "List of scoped assets associated with these scan settings to be scanned.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TopScanUser": {
        "required": [
          "scan_count",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The unique identifier of the user."
          },
          "scan_count": {
            "type": "integer",
            "description": "The number of scans performed by this user.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserVersion": {
        "required": [
          "users_count",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The CLI client version string."
          },
          "users_count": {
            "type": "integer",
            "description": "The number of users using this CLI version.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ViolationsBreakdown": {
        "required": [
          "open_violations",
          "scan_type",
          "scm_provider",
          "severity"
        ],
        "type": "object",
        "properties": {
          "severity": {
            "type": "string",
            "description": "The severity level of the violations."
          },
          "scm_provider": {
            "type": "string",
            "description": "The source code management provider where the violations were found."
          },
          "scan_type": {
            "type": "string",
            "description": "The type of scan that detected the violations."
          },
          "open_violations": {
            "type": "integer",
            "description": "The number of open violations found for this severity, SCM provider, and scan type combination.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AggregatedEntity": {
        "required": [
          "aggregated_event_ids",
          "grouping_fields_values"
        ],
        "type": "object",
        "properties": {
          "grouping_fields_values": {
            "type": "string"
          },
          "aggregated_event_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "AggregationGroupByField": {
        "enum": [
          "User",
          "Team",
          "Repository",
          "Severity",
          "UserAffiliation",
          "SecretValue"
        ],
        "type": "string"
      },
      "AggregationTimeframe": {
        "required": [
          "group_by",
          "timeframe",
          "timeframe_end_date"
        ],
        "type": "object",
        "properties": {
          "workflow_job_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "timeframe": {
            "$ref": "#/components/schemas/Timeframe"
          },
          "timeframe_end_date": {
            "type": "string",
            "format": "date-time"
          },
          "group_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationGroupByField"
            }
          }
        },
        "additionalProperties": false
      },
      "ExtendedFilterRule": {
        "required": [
          "rules"
        ],
        "type": "object",
        "properties": {
          "condition": {
            "type": "string",
            "nullable": true
          },
          "field": {
            "type": "string",
            "nullable": true
          },
          "operator": {
            "type": "string",
            "nullable": true
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedFilterRule"
            }
          },
          "value": {
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "field_unique_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatusType": {
        "enum": [
          "Pending",
          "Running",
          "Completed",
          "Error",
          "Collecting"
        ],
        "type": "string"
      },
      "Timeframe": {
        "enum": [
          "Min5",
          "Min15",
          "Min30",
          "Min60",
          "Hour3",
          "Hour6",
          "Hour9",
          "Hour12",
          "Day1"
        ],
        "type": "string"
      },
      "TriggerSubType": {
        "enum": [
          "Repository",
          "ContainerImage"
        ],
        "type": "string"
      },
      "TriggerType": {
        "enum": [
          "Detection",
          "Report",
          "Graph"
        ],
        "type": "string"
      },
      "Workflow": {
        "required": [
          "actions",
          "created",
          "id",
          "is_enabled",
          "modified",
          "name",
          "priority",
          "project_ids",
          "source",
          "trigger"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "id": {
            "type": "integer",
            "description": "The unique identifier for the workflow.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the workflow."
          },
          "description": {
            "type": "string",
            "description": "An optional description of the workflow.",
            "nullable": true
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Indicates if the workflow is currently active and can be triggered."
          },
          "created_by": {
            "type": "string",
            "description": "The identifier of the user who created the workflow.",
            "nullable": true
          },
          "trigger": {
            "$ref": "#/components/schemas/WorkflowTrigger"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowAction"
            },
            "description": "The list of actions to be executed when the workflow is triggered."
          },
          "workflow_retro": {
            "$ref": "#/components/schemas/WorkflowRetro"
          },
          "aggregation": {
            "$ref": "#/components/schemas/WorkflowAggregation"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of the workflow, used to determine execution order.",
            "format": "int32"
          },
          "should_apply_retroactively": {
            "type": "boolean",
            "description": "Indicates if the workflow should be applied to historical data.",
            "nullable": true
          },
          "apply_retroactively_from": {
            "type": "string",
            "description": "The start date for the retroactive application. Use in conjunction with `should_apply_retroactively`. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time",
            "nullable": true
          },
          "apply_retroactively_to": {
            "type": "string",
            "description": "The end date for the retroactive application. Use in conjunction with `should_apply_retroactively`. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time",
            "nullable": true
          },
          "deleted": {
            "type": "string",
            "description": "The timestamp when the workflow was soft-deleted. A non-null value indicates the workflow is deleted.",
            "format": "date-time",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/WorkflowSource"
          }
        },
        "additionalProperties": false
      },
      "WorkflowActionCreation": {
        "required": [
          "configuration",
          "integration_id",
          "remediation_action"
        ],
        "type": "object",
        "properties": {
          "remediation_action": {
            "minLength": 1,
            "type": "string",
            "description": "Type of remediation action to execute."
          },
          "integration_id": {
            "type": "string",
            "description": "ID of the integration to use for the action.",
            "format": "uuid"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "description": "Configuration parameters for the action."
          }
        },
        "additionalProperties": false
      },
      "WorkflowActionType": {
        "enum": [
          "ScmRemediator",
          "CustomRemediations",
          "PrimaryRemediations"
        ],
        "type": "string"
      },
      "WorkflowAggregation": {
        "required": [
          "group_by",
          "timeframe"
        ],
        "type": "object",
        "properties": {
          "timeframe": {
            "$ref": "#/components/schemas/Timeframe"
          },
          "group_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationGroupByField"
            },
            "description": "Fields to group aggregated events by."
          }
        },
        "additionalProperties": false
      },
      "WorkflowCreationRequest": {
        "required": [
          "actions",
          "is_enabled",
          "name",
          "source",
          "trigger"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the workflow."
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow.",
            "nullable": true
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Indicates if the workflow is enabled. Defaults to `true`."
          },
          "trigger": {
            "$ref": "#/components/schemas/WorkflowTriggerCreation"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowActionCreation"
            },
            "description": "List of actions to execute in the workflow."
          },
          "aggregation": {
            "$ref": "#/components/schemas/WorkflowAggregation"
          },
          "priority": {
            "type": "integer",
            "description": "Priority of the workflow, used to determine execution order.",
            "format": "int32",
            "nullable": true
          },
          "should_apply_retroactively": {
            "type": "boolean",
            "description": "Indicates if the workflow should be applied to historical data.",
            "nullable": true
          },
          "apply_retroactively_from": {
            "type": "string",
            "description": "The start date for retroactive application of the workflow. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time",
            "nullable": true
          },
          "apply_retroactively_to": {
            "type": "string",
            "description": "The end date for retroactive application of the workflow. Format: ISO 8601 DateTimeOffset.",
            "format": "date-time",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/WorkflowSource"
          }
        },
        "additionalProperties": false
      },
      "WorkflowJob": {
        "required": [
          "created",
          "id",
          "modified",
          "priority",
          "project_ids",
          "workflow_job_actions",
          "workflow_name"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "project_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "id": {
            "type": "integer",
            "description": "The unique identifier for the workflow job.",
            "format": "int32"
          },
          "workflow_id": {
            "type": "integer",
            "description": "The unique identifier of the parent workflow this job belongs to.",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/StatusType"
          },
          "workflow_name": {
            "type": "string",
            "description": "The name of the parent workflow this job belongs to."
          },
          "trigger_type": {
            "$ref": "#/components/schemas/TriggerType"
          },
          "trigger_sub_type": {
            "$ref": "#/components/schemas/TriggerSubType"
          },
          "trigger_filter": {
            "$ref": "#/components/schemas/ExtendedFilterRule"
          },
          "workflow_job_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowJobAction"
            },
            "description": "A list of actions that were executed as part of this workflow job."
          },
          "aggregation_timeframe_id": {
            "type": "integer",
            "description": "The unique identifier for the aggregation timeframe, if the job was triggered by an aggregated event.",
            "format": "int32",
            "nullable": true
          },
          "event_trigger_id": {
            "type": "string",
            "description": "The unique identifier of the specific event that triggered this job.",
            "nullable": true
          },
          "aggregated_event_trigger_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of event trigger IDs that were grouped together if this job is the result of an aggregation.",
            "nullable": true
          },
          "aggregated_entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregatedEntity"
            },
            "description": "A list of entities that were grouped together if this job is the result of an aggregation.",
            "nullable": true
          },
          "aggregation_timeframe": {
            "$ref": "#/components/schemas/AggregationTimeframe"
          },
          "priority": {
            "type": "integer",
            "description": "The execution priority assigned to the workflow job.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WorkflowJobAction": {
        "required": [
          "created",
          "id",
          "modified",
          "remediation_action_id",
          "workflow_action_id",
          "workflow_job_id"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "description": "Unique identifier for the workflow job action.",
            "format": "int32"
          },
          "workflow_job_id": {
            "type": "integer",
            "description": "ID of the workflow job this action belongs to.",
            "format": "int32"
          },
          "workflow_action_id": {
            "type": "integer",
            "description": "ID of the workflow action.",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/StatusType"
          },
          "message": {
            "type": "string",
            "description": "Status or error message.",
            "nullable": true
          },
          "remediation_action_id": {
            "type": "string",
            "description": "ID of the remediation action."
          },
          "integration_id": {
            "type": "string",
            "description": "ID of the integration used.",
            "nullable": true
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "description": "Configuration parameters for the action.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowRetro": {
        "required": [
          "created",
          "handled_entities_count",
          "id",
          "modified",
          "status",
          "total_entities_count",
          "workflow_action_id",
          "workflow_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "workflow_id": {
            "type": "integer",
            "format": "int32"
          },
          "workflow_action_id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowRetroStatus"
          },
          "total_entities_count": {
            "type": "integer",
            "format": "int64"
          },
          "handled_entities_count": {
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "modified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "WorkflowRetroStatus": {
        "enum": [
          "Applying",
          "Applied",
          "Reverting",
          "Reverted",
          "Stopped",
          "Failed"
        ],
        "type": "string"
      },
      "WorkflowSource": {
        "enum": [
          "Manually",
          "PullRequestAction",
          "HiddenManually",
          "ViolationPageAction"
        ],
        "type": "string"
      },
      "WorkflowTrigger": {
        "required": [
          "id",
          "type",
          "workflow_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the workflow trigger",
            "format": "int32"
          },
          "workflow_id": {
            "type": "integer",
            "description": "ID of the workflow this trigger belongs to",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/TriggerType"
          },
          "sub_type": {
            "$ref": "#/components/schemas/TriggerSubType"
          },
          "filter": {
            "$ref": "#/components/schemas/ExtendedFilterRule"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "description": "Additional configuration for the trigger",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowTriggerCreation": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TriggerType"
          },
          "sub_type": {
            "$ref": "#/components/schemas/TriggerSubType"
          },
          "filter": {
            "$ref": "#/components/schemas/ExtendedFilterRule"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": {},
            "description": "Additional configuration for the trigger.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowsCount": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of workflows.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "A [JWT Token](https://en.wikipedia.org/wiki/JSON_Web_Token), as a [Bearer Authentication](https://swagger.io/docs/specification/authentication/bearer-authentication/) token, is **required** to use the Cycode APIs. For detailed information about token generation and management, see the [Personal Access Token](#tag/Personal-Access-Token) and [Service Access Token](#tag/Service-Account-Access-Token) sections."
    },
    {
      "name": "Personal Access Token",
      "description": "Access Tokens allow users to create personal API access tokens based on their user’s current role in the current tenant or business group. Personal access tokens enable you to access the Cycode APIs using your specific user (including all of the access your user has). We recommend not using this token for CI/CD pipelines, as a specific user may not always remain active or available. For this use case, see Creating a Service Account Access Token for the purposes of CI/CD pipeline builds.\n\nNote that the allowed user roles for personal access token are: Admin, Owner, Member, and Viewer.\n\n## Viewing your personal access tokens\nTo view your personal access token, click the profile icon in the right-hand corner, select **My Profile**, and then select **Personal Access Tokens** in the left pane.\n\n\nIn the Personal Access Tokens page, you'll be able to create custom API tokens based on your role in the tenant or business group. These tokens offer secure, role-based access to Cycode APIs, ensuring smooth platform use while safeguarding data and user control.\n\n## Adding access tokens\n\n1. To add a new access token, click **New Access Token**. This displays the New Access Token dialog.\n2. Enter an internal name for the access token and click **Create**. Once the new token is created, the Access Token Client ID & Secret dialog is displayed.\nThe new access token displays the Client IDS and Client Secret, as well as the JWT Access Token and Usage Example.\n\n> **Important**:\n>\n> Once you close the Access Token dialog, the Client Secret will no longer be recoverable. Be sure to save these IDs in a safe place.\n\n3. Click **Done** to close the dialog.\nThe new token will now appear in your list of tokens."
    },
    {
      "name": "Service Account Access Token",
      "description": "Service account access tokens allow users to control the access level to Cycode's APIs and are not tied directly to a specific user. This token is best used for integrating Cycode with CI/CD pipeline processes.\n\nIf there is a need to use a specific user's access to Cycode's APIs, see the Creating a Personal Access Token article for details on this access token type.\n\n## Creating a Service Account Access Token steps\n1. Log in to the Cycode platform and click the settings cog in the top right corner of the screen\n2. Click on the **Service Accounts** link in the left sidebar.\n3. Click the **Create New** button.\n4. Enter a description in the pop-up window, select an access level, and click the **Create** button.\n5. Save the Client ID and Secret ID in the new pop-up window.\n\n> **Important**:\n>\n> Once this pop-up is closed, the Client Secret will no longer be recoverable. Be sure to save these IDs in a safe place!\n\n> **Note**:\n>\n> You can use the **Get a JWT Access Token** curl command to generate a token, copy the command into your Postman or CLI.\n\n6. Once the Client Secret and ID have been saved, click the **Close** button. You will see your new key listed.\n"
    },
    {
      "name": "Changelog",
      "description": "### API Version 4.0\n- `10-08-2025` - Introduced \"Compliance\" APIs\n- `15-07-2025` - Enhanced Label Resources APIs with improved parameter handling and new bulk operations **including endpoint deprecations**\n- `15-07-2025` - Introduced new SBOM import management APIs including bulk delete and replace operations\n- `15-07-2025` - Enhanced collision calculation APIs with direct collision filtering\n- `19-05-2025` - Added Reports related APIs\n- `12-05-2025` - Added Audit log related APIs"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Overview",
      "tags": [
        "Authentication"
      ]
    },
    {
      "name": "Endpoints",
      "tags": [
        "Audit logs",
        "Groups",
        "Members",
        "Projects",
        "Project Members",
        "Tokens",
        "Brokers",
        "Custom Frameworks",
        "Stats",
        "Container Image Code Repositories",
        "SBOM",
        "Custom Connectors",
        "Vulnerability Report Syncs",
        "Kubernetes integration",
        "Labels",
        "Label Resources",
        "Reports",
        "Resource Owners",
        "CLI scan statistics",
        "Pull requests scan statistics",
        "Pull request scoped scan settings",
        "Workflows",
        "Workflow Jobs"
      ]
    },
    {
      "name": "Compliance",
      "tags": [
        "Frameworks",
        "Framework Activation",
        "Practices",
        "Requirements",
        "Controls",
        "Evidence",
        "Control Evidence"
      ]
    },
    {
      "name": "Token Generation",
      "tags": [
        "Personal Access Token",
        "Service Account Access Token"
      ]
    },
    {
      "name": "Changelog",
      "tags": [
        "Changelog"
      ]
    }
  ],
  "servers": [
    {
      "url": "https://api.cycode.com"
    }
  ]
}